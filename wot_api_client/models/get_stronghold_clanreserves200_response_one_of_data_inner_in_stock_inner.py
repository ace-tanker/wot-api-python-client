# coding: utf-8

"""
    World of Tanks

    OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer's room](https://developers.wargaming.net/).

    The version of the OpenAPI document: 1.0.0
    Contact: contact@ace-tanker.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wot_api_client.models.get_stronghold_clanreserves200_response_one_of_data_inner_in_stock_inner_bonus_values_inner import GetStrongholdClanreserves200ResponseOneOfDataInnerInStockInnerBonusValuesInner
from typing import Optional, Set
from typing_extensions import Self

class GetStrongholdClanreserves200ResponseOneOfDataInnerInStockInner(BaseModel):
    """
    GetStrongholdClanreserves200ResponseOneOfDataInnerInStockInner
    """ # noqa: E501
    amount: StrictInt = Field(description="Number of clan Reserves of each level")
    bonus_values: Optional[List[Optional[GetStrongholdClanreserves200ResponseOneOfDataInnerInStockInnerBonusValuesInner]]] = Field(description="Reserve efficiencies")
    x_level_only: StrictBool = Field(description="Indicates if the Reserve is only for Tier X vehicles")
    status: Optional[StrictStr] = Field(description="Status of clan Reserves of each level")
    action_time: Optional[StrictInt] = Field(description="Duration of clan Reserves of each level")
    activated_at: Optional[StrictInt] = Field(description="Activation time of clan Reserves of each level")
    active_till: Optional[StrictInt] = Field(description="Expiration time of clan Reserves of each level")
    level: StrictInt = Field(description="Level of available clan Reserves")
    __properties: ClassVar[List[str]] = ["amount", "bonus_values", "x_level_only", "status", "action_time", "activated_at", "active_till", "level"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetStrongholdClanreserves200ResponseOneOfDataInnerInStockInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bonus_values (list)
        _items = []
        if self.bonus_values:
            for _item_bonus_values in self.bonus_values:
                if _item_bonus_values:
                    _items.append(_item_bonus_values.to_dict())
            _dict['bonus_values'] = _items
        # set to None if bonus_values (nullable) is None
        # and model_fields_set contains the field
        if self.bonus_values is None and "bonus_values" in self.model_fields_set:
            _dict['bonus_values'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if action_time (nullable) is None
        # and model_fields_set contains the field
        if self.action_time is None and "action_time" in self.model_fields_set:
            _dict['action_time'] = None

        # set to None if activated_at (nullable) is None
        # and model_fields_set contains the field
        if self.activated_at is None and "activated_at" in self.model_fields_set:
            _dict['activated_at'] = None

        # set to None if active_till (nullable) is None
        # and model_fields_set contains the field
        if self.active_till is None and "active_till" in self.model_fields_set:
            _dict['active_till'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetStrongholdClanreserves200ResponseOneOfDataInnerInStockInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "bonus_values": [GetStrongholdClanreserves200ResponseOneOfDataInnerInStockInnerBonusValuesInner.from_dict(_item) for _item in obj["bonus_values"]] if obj.get("bonus_values") is not None else None,
            "x_level_only": obj.get("x_level_only"),
            "status": obj.get("status"),
            "action_time": obj.get("action_time"),
            "activated_at": obj.get("activated_at"),
            "active_till": obj.get("active_till"),
            "level": obj.get("level")
        })
        return _obj


