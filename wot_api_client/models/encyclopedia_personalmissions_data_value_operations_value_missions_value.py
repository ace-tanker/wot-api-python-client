# coding: utf-8

"""
    World of Tanks

    OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer's room](https://developers.wargaming.net/).

    The version of the OpenAPI document: 1.0.0
    Contact: contact@ace-tanker.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wot_api_client.models.encyclopedia_personalmissions_data_value_operations_value_missions_value_rewards_value import EncyclopediaPersonalmissionsDataValueOperationsValueMissionsValueRewardsValue
from typing import Optional, Set
from typing_extensions import Self

class EncyclopediaPersonalmissionsDataValueOperationsValueMissionsValue(BaseModel):
    """
    EncyclopediaPersonalmissionsDataValueOperationsValueMissionsValue
    """ # noqa: E501
    mission_id: StrictInt = Field(description="Mission ID")
    set_id: StrictInt = Field(description="Mission branch ID")
    name: StrictStr = Field(description="Mission name")
    description: StrictStr = Field(description="Mission description")
    hint: Optional[StrictStr] = Field(description="Hints")
    min_level: StrictInt = Field(description="Minimum vehicle Tier")
    max_level: StrictInt = Field(description="Maximum vehicle Tier")
    tags: List[StrictStr] = Field(description="Mission tags")
    rewards: Optional[Dict[str, Optional[EncyclopediaPersonalmissionsDataValueOperationsValueMissionsValueRewardsValue]]] = Field(description="Rewards grouped by mission conditions")
    __properties: ClassVar[List[str]] = ["mission_id", "set_id", "name", "description", "hint", "min_level", "max_level", "tags", "rewards"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EncyclopediaPersonalmissionsDataValueOperationsValueMissionsValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in rewards (dict)
        _field_dict = {}
        if self.rewards:
            for _key_rewards in self.rewards:
                if self.rewards[_key_rewards]:
                    _field_dict[_key_rewards] = self.rewards[_key_rewards].to_dict()
            _dict['rewards'] = _field_dict
        # set to None if hint (nullable) is None
        # and model_fields_set contains the field
        if self.hint is None and "hint" in self.model_fields_set:
            _dict['hint'] = None

        # set to None if rewards (nullable) is None
        # and model_fields_set contains the field
        if self.rewards is None and "rewards" in self.model_fields_set:
            _dict['rewards'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EncyclopediaPersonalmissionsDataValueOperationsValueMissionsValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mission_id": obj.get("mission_id"),
            "set_id": obj.get("set_id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "hint": obj.get("hint"),
            "min_level": obj.get("min_level"),
            "max_level": obj.get("max_level"),
            "tags": obj.get("tags"),
            "rewards": dict(
                (_k, EncyclopediaPersonalmissionsDataValueOperationsValueMissionsValueRewardsValue.from_dict(_v))
                for _k, _v in obj["rewards"].items()
            )
            if obj.get("rewards") is not None
            else None
        })
        return _obj


