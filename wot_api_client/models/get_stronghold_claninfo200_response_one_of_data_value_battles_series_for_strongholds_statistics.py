# coding: utf-8

"""
    World of Tanks

    OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer's room](https://developers.wargaming.net/).

    The version of the OpenAPI document: 1.0.0
    Contact: contact@ace-tanker.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class GetStrongholdClaninfo200ResponseOneOfDataValueBattlesSeriesForStrongholdsStatistics(BaseModel):
    """
    Statistics for skirmishes against the clan's Stronghold
    """ # noqa: E501
    total_10: StrictInt = Field(description="Total number of battles on Tier X vehicles")
    win_10: StrictInt = Field(description="Number of victories on Tier X vehicles")
    lose_10: StrictInt = Field(description="Number of defeats on Tier X vehicles")
    total_10_in_28d: StrictInt = Field(description="Total number of battles on Tier X vehicles within the last 28 days")
    win_10_in_28d: StrictInt = Field(description="Number of victories on Tier X vehicles within the last 28 days")
    __properties: ClassVar[List[str]] = ["total_10", "win_10", "lose_10", "total_10_in_28d", "win_10_in_28d"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetStrongholdClaninfo200ResponseOneOfDataValueBattlesSeriesForStrongholdsStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetStrongholdClaninfo200ResponseOneOfDataValueBattlesSeriesForStrongholdsStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "total_10": obj.get("total_10"),
            "win_10": obj.get("win_10"),
            "lose_10": obj.get("lose_10"),
            "total_10_in_28d": obj.get("total_10_in_28d"),
            "win_10_in_28d": obj.get("win_10_in_28d")
        })
        return _obj


