# coding: utf-8

"""
    World of Tanks

    OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer's room](https://developers.wargaming.net/).

    The version of the OpenAPI document: 1.0.0
    Contact: contact@ace-tanker.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wot_api_client.models.get_encyclopedia_modules200_response_one_of_data_value_default_profile import GetEncyclopediaModules200ResponseOneOfDataValueDefaultProfile
from typing import Optional, Set
from typing_extensions import Self

class GetEncyclopediaModules200ResponseOneOfDataValue(BaseModel):
    """
    GetEncyclopediaModules200ResponseOneOfDataValue
    """ # noqa: E501
    module_id: StrictInt = Field(description="Module ID")
    type: StrictStr = Field(description="Module type")
    name: StrictStr = Field(description="Module name")
    price_credit: StrictInt = Field(description="Cost in credits")
    image: StrictStr = Field(description="Image link")
    weight: StrictInt = Field(description="Weight (kg)")
    tier: StrictInt = Field(description="Tier")
    nation: StrictStr = Field(description="Nation")
    tanks: List[StrictInt] = Field(description="Vehicles compatible with module")
    default_profile: Optional[GetEncyclopediaModules200ResponseOneOfDataValueDefaultProfile] = None
    __properties: ClassVar[List[str]] = ["module_id", "type", "name", "price_credit", "image", "weight", "tier", "nation", "tanks", "default_profile"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetEncyclopediaModules200ResponseOneOfDataValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_profile
        if self.default_profile:
            _dict['default_profile'] = self.default_profile.to_dict()
        # set to None if default_profile (nullable) is None
        # and model_fields_set contains the field
        if self.default_profile is None and "default_profile" in self.model_fields_set:
            _dict['default_profile'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetEncyclopediaModules200ResponseOneOfDataValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "module_id": obj.get("module_id"),
            "type": obj.get("type"),
            "name": obj.get("name"),
            "price_credit": obj.get("price_credit"),
            "image": obj.get("image"),
            "weight": obj.get("weight"),
            "tier": obj.get("tier"),
            "nation": obj.get("nation"),
            "tanks": obj.get("tanks"),
            "default_profile": GetEncyclopediaModules200ResponseOneOfDataValueDefaultProfile.from_dict(obj["default_profile"]) if obj.get("default_profile") is not None else None
        })
        return _obj


