# coding: utf-8

"""
    World of Tanks

    OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer's room](https://developers.wargaming.net/).

    The version of the OpenAPI document: 1.0.0
    Contact: contact@ace-tanker.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from wot_api_client.models.get_account_info200_response_one_of_data_value_statistics_all import GetAccountInfo200ResponseOneOfDataValueStatisticsAll
from wot_api_client.models.get_account_info200_response_one_of_data_value_statistics_clan import GetAccountInfo200ResponseOneOfDataValueStatisticsClan
from wot_api_client.models.get_account_info200_response_one_of_data_value_statistics_company import GetAccountInfo200ResponseOneOfDataValueStatisticsCompany
from wot_api_client.models.get_account_info200_response_one_of_data_value_statistics_epic import GetAccountInfo200ResponseOneOfDataValueStatisticsEpic
from wot_api_client.models.get_account_info200_response_one_of_data_value_statistics_fallout import GetAccountInfo200ResponseOneOfDataValueStatisticsFallout
from wot_api_client.models.get_account_info200_response_one_of_data_value_statistics_globalmap_absolute import GetAccountInfo200ResponseOneOfDataValueStatisticsGlobalmapAbsolute
from wot_api_client.models.get_account_info200_response_one_of_data_value_statistics_globalmap_champion import GetAccountInfo200ResponseOneOfDataValueStatisticsGlobalmapChampion
from wot_api_client.models.get_account_info200_response_one_of_data_value_statistics_globalmap_middle import GetAccountInfo200ResponseOneOfDataValueStatisticsGlobalmapMiddle
from wot_api_client.models.get_account_info200_response_one_of_data_value_statistics_historical import GetAccountInfo200ResponseOneOfDataValueStatisticsHistorical
from wot_api_client.models.get_account_info200_response_one_of_data_value_statistics_random import GetAccountInfo200ResponseOneOfDataValueStatisticsRandom
from wot_api_client.models.get_account_info200_response_one_of_data_value_statistics_ranked10x10 import GetAccountInfo200ResponseOneOfDataValueStatisticsRanked10x10
from wot_api_client.models.get_account_info200_response_one_of_data_value_statistics_ranked15x15 import GetAccountInfo200ResponseOneOfDataValueStatisticsRanked15x15
from wot_api_client.models.get_account_info200_response_one_of_data_value_statistics_ranked_battles import GetAccountInfo200ResponseOneOfDataValueStatisticsRankedBattles
from wot_api_client.models.get_account_info200_response_one_of_data_value_statistics_ranked_battles_current import GetAccountInfo200ResponseOneOfDataValueStatisticsRankedBattlesCurrent
from wot_api_client.models.get_account_info200_response_one_of_data_value_statistics_ranked_battles_previous import GetAccountInfo200ResponseOneOfDataValueStatisticsRankedBattlesPrevious
from wot_api_client.models.get_account_info200_response_one_of_data_value_statistics_ranked_season1 import GetAccountInfo200ResponseOneOfDataValueStatisticsRankedSeason1
from wot_api_client.models.get_account_info200_response_one_of_data_value_statistics_ranked_season2 import GetAccountInfo200ResponseOneOfDataValueStatisticsRankedSeason2
from wot_api_client.models.get_account_info200_response_one_of_data_value_statistics_ranked_season3 import GetAccountInfo200ResponseOneOfDataValueStatisticsRankedSeason3
from wot_api_client.models.get_account_info200_response_one_of_data_value_statistics_regular_team import GetAccountInfo200ResponseOneOfDataValueStatisticsRegularTeam
from wot_api_client.models.get_account_info200_response_one_of_data_value_statistics_stronghold_defense import GetAccountInfo200ResponseOneOfDataValueStatisticsStrongholdDefense
from wot_api_client.models.get_account_info200_response_one_of_data_value_statistics_stronghold_skirmish import GetAccountInfo200ResponseOneOfDataValueStatisticsStrongholdSkirmish
from wot_api_client.models.get_account_info200_response_one_of_data_value_statistics_team import GetAccountInfo200ResponseOneOfDataValueStatisticsTeam
from typing import Optional, Set
from typing_extensions import Self

class GetAccountInfo200ResponseOneOfDataValueStatistics(BaseModel):
    """
    Player statistics
    """ # noqa: E501
    trees_cut: StrictInt = Field(description="Trees knocked down")
    all: Optional[GetAccountInfo200ResponseOneOfDataValueStatisticsAll]
    company: Optional[GetAccountInfo200ResponseOneOfDataValueStatisticsCompany]
    clan: Optional[GetAccountInfo200ResponseOneOfDataValueStatisticsClan]
    fallout: Optional[GetAccountInfo200ResponseOneOfDataValueStatisticsFallout] = None
    random: Optional[GetAccountInfo200ResponseOneOfDataValueStatisticsRandom] = None
    stronghold_defense: Optional[GetAccountInfo200ResponseOneOfDataValueStatisticsStrongholdDefense]
    stronghold_skirmish: Optional[GetAccountInfo200ResponseOneOfDataValueStatisticsStrongholdSkirmish]
    historical: Optional[GetAccountInfo200ResponseOneOfDataValueStatisticsHistorical]
    frags: Optional[Dict[str, StrictInt]] = Field(description="Number and models of vehicles destroyed by a player. Player's private data.")
    team: Optional[GetAccountInfo200ResponseOneOfDataValueStatisticsTeam]
    epic: Optional[GetAccountInfo200ResponseOneOfDataValueStatisticsEpic] = None
    regular_team: Optional[GetAccountInfo200ResponseOneOfDataValueStatisticsRegularTeam]
    globalmap_middle: Optional[GetAccountInfo200ResponseOneOfDataValueStatisticsGlobalmapMiddle] = None
    globalmap_champion: Optional[GetAccountInfo200ResponseOneOfDataValueStatisticsGlobalmapChampion] = None
    globalmap_absolute: Optional[GetAccountInfo200ResponseOneOfDataValueStatisticsGlobalmapAbsolute] = None
    ranked_battles: Optional[GetAccountInfo200ResponseOneOfDataValueStatisticsRankedBattles] = None
    ranked_battles_current: Optional[GetAccountInfo200ResponseOneOfDataValueStatisticsRankedBattlesCurrent] = None
    ranked_battles_previous: Optional[GetAccountInfo200ResponseOneOfDataValueStatisticsRankedBattlesPrevious] = None
    ranked_10x10: Optional[GetAccountInfo200ResponseOneOfDataValueStatisticsRanked10x10] = None
    ranked_15x15: Optional[GetAccountInfo200ResponseOneOfDataValueStatisticsRanked15x15] = None
    ranked_season_1: Optional[GetAccountInfo200ResponseOneOfDataValueStatisticsRankedSeason1] = None
    ranked_season_2: Optional[GetAccountInfo200ResponseOneOfDataValueStatisticsRankedSeason2] = None
    ranked_season_3: Optional[GetAccountInfo200ResponseOneOfDataValueStatisticsRankedSeason3] = None
    __properties: ClassVar[List[str]] = ["trees_cut", "all", "company", "clan", "fallout", "random", "stronghold_defense", "stronghold_skirmish", "historical", "frags", "team", "epic", "regular_team", "globalmap_middle", "globalmap_champion", "globalmap_absolute", "ranked_battles", "ranked_battles_current", "ranked_battles_previous", "ranked_10x10", "ranked_15x15", "ranked_season_1", "ranked_season_2", "ranked_season_3"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAccountInfo200ResponseOneOfDataValueStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of all
        if self.all:
            _dict['all'] = self.all.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of clan
        if self.clan:
            _dict['clan'] = self.clan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fallout
        if self.fallout:
            _dict['fallout'] = self.fallout.to_dict()
        # override the default output from pydantic by calling `to_dict()` of random
        if self.random:
            _dict['random'] = self.random.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stronghold_defense
        if self.stronghold_defense:
            _dict['stronghold_defense'] = self.stronghold_defense.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stronghold_skirmish
        if self.stronghold_skirmish:
            _dict['stronghold_skirmish'] = self.stronghold_skirmish.to_dict()
        # override the default output from pydantic by calling `to_dict()` of historical
        if self.historical:
            _dict['historical'] = self.historical.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team
        if self.team:
            _dict['team'] = self.team.to_dict()
        # override the default output from pydantic by calling `to_dict()` of epic
        if self.epic:
            _dict['epic'] = self.epic.to_dict()
        # override the default output from pydantic by calling `to_dict()` of regular_team
        if self.regular_team:
            _dict['regular_team'] = self.regular_team.to_dict()
        # override the default output from pydantic by calling `to_dict()` of globalmap_middle
        if self.globalmap_middle:
            _dict['globalmap_middle'] = self.globalmap_middle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of globalmap_champion
        if self.globalmap_champion:
            _dict['globalmap_champion'] = self.globalmap_champion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of globalmap_absolute
        if self.globalmap_absolute:
            _dict['globalmap_absolute'] = self.globalmap_absolute.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ranked_battles
        if self.ranked_battles:
            _dict['ranked_battles'] = self.ranked_battles.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ranked_battles_current
        if self.ranked_battles_current:
            _dict['ranked_battles_current'] = self.ranked_battles_current.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ranked_battles_previous
        if self.ranked_battles_previous:
            _dict['ranked_battles_previous'] = self.ranked_battles_previous.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ranked_10x10
        if self.ranked_10x10:
            _dict['ranked_10x10'] = self.ranked_10x10.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ranked_15x15
        if self.ranked_15x15:
            _dict['ranked_15x15'] = self.ranked_15x15.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ranked_season_1
        if self.ranked_season_1:
            _dict['ranked_season_1'] = self.ranked_season_1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ranked_season_2
        if self.ranked_season_2:
            _dict['ranked_season_2'] = self.ranked_season_2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ranked_season_3
        if self.ranked_season_3:
            _dict['ranked_season_3'] = self.ranked_season_3.to_dict()
        # set to None if all (nullable) is None
        # and model_fields_set contains the field
        if self.all is None and "all" in self.model_fields_set:
            _dict['all'] = None

        # set to None if company (nullable) is None
        # and model_fields_set contains the field
        if self.company is None and "company" in self.model_fields_set:
            _dict['company'] = None

        # set to None if clan (nullable) is None
        # and model_fields_set contains the field
        if self.clan is None and "clan" in self.model_fields_set:
            _dict['clan'] = None

        # set to None if fallout (nullable) is None
        # and model_fields_set contains the field
        if self.fallout is None and "fallout" in self.model_fields_set:
            _dict['fallout'] = None

        # set to None if random (nullable) is None
        # and model_fields_set contains the field
        if self.random is None and "random" in self.model_fields_set:
            _dict['random'] = None

        # set to None if stronghold_defense (nullable) is None
        # and model_fields_set contains the field
        if self.stronghold_defense is None and "stronghold_defense" in self.model_fields_set:
            _dict['stronghold_defense'] = None

        # set to None if stronghold_skirmish (nullable) is None
        # and model_fields_set contains the field
        if self.stronghold_skirmish is None and "stronghold_skirmish" in self.model_fields_set:
            _dict['stronghold_skirmish'] = None

        # set to None if historical (nullable) is None
        # and model_fields_set contains the field
        if self.historical is None and "historical" in self.model_fields_set:
            _dict['historical'] = None

        # set to None if frags (nullable) is None
        # and model_fields_set contains the field
        if self.frags is None and "frags" in self.model_fields_set:
            _dict['frags'] = None

        # set to None if team (nullable) is None
        # and model_fields_set contains the field
        if self.team is None and "team" in self.model_fields_set:
            _dict['team'] = None

        # set to None if epic (nullable) is None
        # and model_fields_set contains the field
        if self.epic is None and "epic" in self.model_fields_set:
            _dict['epic'] = None

        # set to None if regular_team (nullable) is None
        # and model_fields_set contains the field
        if self.regular_team is None and "regular_team" in self.model_fields_set:
            _dict['regular_team'] = None

        # set to None if globalmap_middle (nullable) is None
        # and model_fields_set contains the field
        if self.globalmap_middle is None and "globalmap_middle" in self.model_fields_set:
            _dict['globalmap_middle'] = None

        # set to None if globalmap_champion (nullable) is None
        # and model_fields_set contains the field
        if self.globalmap_champion is None and "globalmap_champion" in self.model_fields_set:
            _dict['globalmap_champion'] = None

        # set to None if globalmap_absolute (nullable) is None
        # and model_fields_set contains the field
        if self.globalmap_absolute is None and "globalmap_absolute" in self.model_fields_set:
            _dict['globalmap_absolute'] = None

        # set to None if ranked_battles (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_battles is None and "ranked_battles" in self.model_fields_set:
            _dict['ranked_battles'] = None

        # set to None if ranked_battles_current (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_battles_current is None and "ranked_battles_current" in self.model_fields_set:
            _dict['ranked_battles_current'] = None

        # set to None if ranked_battles_previous (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_battles_previous is None and "ranked_battles_previous" in self.model_fields_set:
            _dict['ranked_battles_previous'] = None

        # set to None if ranked_10x10 (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_10x10 is None and "ranked_10x10" in self.model_fields_set:
            _dict['ranked_10x10'] = None

        # set to None if ranked_15x15 (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_15x15 is None and "ranked_15x15" in self.model_fields_set:
            _dict['ranked_15x15'] = None

        # set to None if ranked_season_1 (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_season_1 is None and "ranked_season_1" in self.model_fields_set:
            _dict['ranked_season_1'] = None

        # set to None if ranked_season_2 (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_season_2 is None and "ranked_season_2" in self.model_fields_set:
            _dict['ranked_season_2'] = None

        # set to None if ranked_season_3 (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_season_3 is None and "ranked_season_3" in self.model_fields_set:
            _dict['ranked_season_3'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAccountInfo200ResponseOneOfDataValueStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "trees_cut": obj.get("trees_cut"),
            "all": GetAccountInfo200ResponseOneOfDataValueStatisticsAll.from_dict(obj["all"]) if obj.get("all") is not None else None,
            "company": GetAccountInfo200ResponseOneOfDataValueStatisticsCompany.from_dict(obj["company"]) if obj.get("company") is not None else None,
            "clan": GetAccountInfo200ResponseOneOfDataValueStatisticsClan.from_dict(obj["clan"]) if obj.get("clan") is not None else None,
            "fallout": GetAccountInfo200ResponseOneOfDataValueStatisticsFallout.from_dict(obj["fallout"]) if obj.get("fallout") is not None else None,
            "random": GetAccountInfo200ResponseOneOfDataValueStatisticsRandom.from_dict(obj["random"]) if obj.get("random") is not None else None,
            "stronghold_defense": GetAccountInfo200ResponseOneOfDataValueStatisticsStrongholdDefense.from_dict(obj["stronghold_defense"]) if obj.get("stronghold_defense") is not None else None,
            "stronghold_skirmish": GetAccountInfo200ResponseOneOfDataValueStatisticsStrongholdSkirmish.from_dict(obj["stronghold_skirmish"]) if obj.get("stronghold_skirmish") is not None else None,
            "historical": GetAccountInfo200ResponseOneOfDataValueStatisticsHistorical.from_dict(obj["historical"]) if obj.get("historical") is not None else None,
            "frags": obj.get("frags"),
            "team": GetAccountInfo200ResponseOneOfDataValueStatisticsTeam.from_dict(obj["team"]) if obj.get("team") is not None else None,
            "epic": GetAccountInfo200ResponseOneOfDataValueStatisticsEpic.from_dict(obj["epic"]) if obj.get("epic") is not None else None,
            "regular_team": GetAccountInfo200ResponseOneOfDataValueStatisticsRegularTeam.from_dict(obj["regular_team"]) if obj.get("regular_team") is not None else None,
            "globalmap_middle": GetAccountInfo200ResponseOneOfDataValueStatisticsGlobalmapMiddle.from_dict(obj["globalmap_middle"]) if obj.get("globalmap_middle") is not None else None,
            "globalmap_champion": GetAccountInfo200ResponseOneOfDataValueStatisticsGlobalmapChampion.from_dict(obj["globalmap_champion"]) if obj.get("globalmap_champion") is not None else None,
            "globalmap_absolute": GetAccountInfo200ResponseOneOfDataValueStatisticsGlobalmapAbsolute.from_dict(obj["globalmap_absolute"]) if obj.get("globalmap_absolute") is not None else None,
            "ranked_battles": GetAccountInfo200ResponseOneOfDataValueStatisticsRankedBattles.from_dict(obj["ranked_battles"]) if obj.get("ranked_battles") is not None else None,
            "ranked_battles_current": GetAccountInfo200ResponseOneOfDataValueStatisticsRankedBattlesCurrent.from_dict(obj["ranked_battles_current"]) if obj.get("ranked_battles_current") is not None else None,
            "ranked_battles_previous": GetAccountInfo200ResponseOneOfDataValueStatisticsRankedBattlesPrevious.from_dict(obj["ranked_battles_previous"]) if obj.get("ranked_battles_previous") is not None else None,
            "ranked_10x10": GetAccountInfo200ResponseOneOfDataValueStatisticsRanked10x10.from_dict(obj["ranked_10x10"]) if obj.get("ranked_10x10") is not None else None,
            "ranked_15x15": GetAccountInfo200ResponseOneOfDataValueStatisticsRanked15x15.from_dict(obj["ranked_15x15"]) if obj.get("ranked_15x15") is not None else None,
            "ranked_season_1": GetAccountInfo200ResponseOneOfDataValueStatisticsRankedSeason1.from_dict(obj["ranked_season_1"]) if obj.get("ranked_season_1") is not None else None,
            "ranked_season_2": GetAccountInfo200ResponseOneOfDataValueStatisticsRankedSeason2.from_dict(obj["ranked_season_2"]) if obj.get("ranked_season_2") is not None else None,
            "ranked_season_3": GetAccountInfo200ResponseOneOfDataValueStatisticsRankedSeason3.from_dict(obj["ranked_season_3"]) if obj.get("ranked_season_3") is not None else None
        })
        return _obj


