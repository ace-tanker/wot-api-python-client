# coding: utf-8

"""
    World of Tanks

    OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer's room](https://developers.wargaming.net/).

    The version of the OpenAPI document: 1.0.0
    Contact: contact@ace-tanker.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wot_api_client.models.get_stronghold_claninfo200_response_one_of_data_value_battles_for_strongholds_statistics import GetStrongholdClaninfo200ResponseOneOfDataValueBattlesForStrongholdsStatistics
from wot_api_client.models.get_stronghold_claninfo200_response_one_of_data_value_battles_series_for_strongholds_statistics import GetStrongholdClaninfo200ResponseOneOfDataValueBattlesSeriesForStrongholdsStatistics
from wot_api_client.models.get_stronghold_claninfo200_response_one_of_data_value_building_slots_inner import GetStrongholdClaninfo200ResponseOneOfDataValueBuildingSlotsInner
from wot_api_client.models.get_stronghold_claninfo200_response_one_of_data_value_skirmish_statistics import GetStrongholdClaninfo200ResponseOneOfDataValueSkirmishStatistics
from typing import Optional, Set
from typing_extensions import Self

class GetStrongholdClaninfo200ResponseOneOfDataValue(BaseModel):
    """
    GetStrongholdClaninfo200ResponseOneOfDataValue
    """ # noqa: E501
    clan_id: StrictInt = Field(description="Clan ID")
    clan_name: StrictStr = Field(description="Clan name")
    clan_tag: StrictStr = Field(description="Clan tag")
    stronghold_level: StrictInt = Field(description="Stronghold's level")
    stronghold_buildings_level: StrictInt = Field(description="Total level of the Stronghold's structures")
    command_center_arena_id: StrictStr = Field(description="Map ID associated with the Command Center construction site")
    building_slots: Optional[List[Optional[GetStrongholdClaninfo200ResponseOneOfDataValueBuildingSlotsInner]]] = Field(description="Information about the Stronghold's construction sites")
    skirmish_statistics: Optional[GetStrongholdClaninfo200ResponseOneOfDataValueSkirmishStatistics]
    battles_for_strongholds_statistics: Optional[GetStrongholdClaninfo200ResponseOneOfDataValueBattlesForStrongholdsStatistics]
    battles_series_for_strongholds_statistics: Optional[GetStrongholdClaninfo200ResponseOneOfDataValueBattlesSeriesForStrongholdsStatistics]
    __properties: ClassVar[List[str]] = ["clan_id", "clan_name", "clan_tag", "stronghold_level", "stronghold_buildings_level", "command_center_arena_id", "building_slots", "skirmish_statistics", "battles_for_strongholds_statistics", "battles_series_for_strongholds_statistics"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetStrongholdClaninfo200ResponseOneOfDataValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in building_slots (list)
        _items = []
        if self.building_slots:
            for _item_building_slots in self.building_slots:
                if _item_building_slots:
                    _items.append(_item_building_slots.to_dict())
            _dict['building_slots'] = _items
        # override the default output from pydantic by calling `to_dict()` of skirmish_statistics
        if self.skirmish_statistics:
            _dict['skirmish_statistics'] = self.skirmish_statistics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of battles_for_strongholds_statistics
        if self.battles_for_strongholds_statistics:
            _dict['battles_for_strongholds_statistics'] = self.battles_for_strongholds_statistics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of battles_series_for_strongholds_statistics
        if self.battles_series_for_strongholds_statistics:
            _dict['battles_series_for_strongholds_statistics'] = self.battles_series_for_strongholds_statistics.to_dict()
        # set to None if building_slots (nullable) is None
        # and model_fields_set contains the field
        if self.building_slots is None and "building_slots" in self.model_fields_set:
            _dict['building_slots'] = None

        # set to None if skirmish_statistics (nullable) is None
        # and model_fields_set contains the field
        if self.skirmish_statistics is None and "skirmish_statistics" in self.model_fields_set:
            _dict['skirmish_statistics'] = None

        # set to None if battles_for_strongholds_statistics (nullable) is None
        # and model_fields_set contains the field
        if self.battles_for_strongholds_statistics is None and "battles_for_strongholds_statistics" in self.model_fields_set:
            _dict['battles_for_strongholds_statistics'] = None

        # set to None if battles_series_for_strongholds_statistics (nullable) is None
        # and model_fields_set contains the field
        if self.battles_series_for_strongholds_statistics is None and "battles_series_for_strongholds_statistics" in self.model_fields_set:
            _dict['battles_series_for_strongholds_statistics'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetStrongholdClaninfo200ResponseOneOfDataValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clan_id": obj.get("clan_id"),
            "clan_name": obj.get("clan_name"),
            "clan_tag": obj.get("clan_tag"),
            "stronghold_level": obj.get("stronghold_level"),
            "stronghold_buildings_level": obj.get("stronghold_buildings_level"),
            "command_center_arena_id": obj.get("command_center_arena_id"),
            "building_slots": [GetStrongholdClaninfo200ResponseOneOfDataValueBuildingSlotsInner.from_dict(_item) for _item in obj["building_slots"]] if obj.get("building_slots") is not None else None,
            "skirmish_statistics": GetStrongholdClaninfo200ResponseOneOfDataValueSkirmishStatistics.from_dict(obj["skirmish_statistics"]) if obj.get("skirmish_statistics") is not None else None,
            "battles_for_strongholds_statistics": GetStrongholdClaninfo200ResponseOneOfDataValueBattlesForStrongholdsStatistics.from_dict(obj["battles_for_strongholds_statistics"]) if obj.get("battles_for_strongholds_statistics") is not None else None,
            "battles_series_for_strongholds_statistics": GetStrongholdClaninfo200ResponseOneOfDataValueBattlesSeriesForStrongholdsStatistics.from_dict(obj["battles_series_for_strongholds_statistics"]) if obj.get("battles_series_for_strongholds_statistics") is not None else None
        })
        return _obj


