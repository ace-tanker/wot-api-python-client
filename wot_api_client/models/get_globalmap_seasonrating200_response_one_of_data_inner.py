# coding: utf-8

"""
    World of Tanks

    OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer's room](https://developers.wargaming.net/).

    The version of the OpenAPI document: 1.0.0
    Contact: contact@ace-tanker.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetGlobalmapSeasonrating200ResponseOneOfDataInner(BaseModel):
    """
    GetGlobalmapSeasonrating200ResponseOneOfDataInner
    """ # noqa: E501
    clan_id: StrictInt = Field(description="Clan ID")
    name: StrictStr = Field(description="Clan name")
    tag: StrictStr = Field(description="Clan tag")
    color: StrictStr = Field(description="Clan color")
    award_level: Optional[StrictStr] = Field(description="Award level")
    rank: StrictInt = Field(description="Current rating")
    rank_delta: StrictInt = Field(description="Rating changes during previous turn")
    updated_at: StrictInt = Field(description="Date of rating calculation")
    victory_points: StrictInt = Field(description="Victory Points")
    victory_points_to_next_award: StrictInt = Field(description="Victory Points to get the next award")
    __properties: ClassVar[List[str]] = ["clan_id", "name", "tag", "color", "award_level", "rank", "rank_delta", "updated_at", "victory_points", "victory_points_to_next_award"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetGlobalmapSeasonrating200ResponseOneOfDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if award_level (nullable) is None
        # and model_fields_set contains the field
        if self.award_level is None and "award_level" in self.model_fields_set:
            _dict['award_level'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetGlobalmapSeasonrating200ResponseOneOfDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clan_id": obj.get("clan_id"),
            "name": obj.get("name"),
            "tag": obj.get("tag"),
            "color": obj.get("color"),
            "award_level": obj.get("award_level"),
            "rank": obj.get("rank"),
            "rank_delta": obj.get("rank_delta"),
            "updated_at": obj.get("updated_at"),
            "victory_points": obj.get("victory_points"),
            "victory_points_to_next_award": obj.get("victory_points_to_next_award")
        })
        return _obj


