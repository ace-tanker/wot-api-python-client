# coding: utf-8

"""
    World of Tanks

    OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer's room](https://developers.wargaming.net/).

    The version of the OpenAPI document: 1.0.0
    Contact: contact@ace-tanker.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wot_api_client.models.globalmap_provinces_data_inner_active_battles_inner import GlobalmapProvincesDataInnerActiveBattlesInner
from typing import Optional, Set
from typing_extensions import Self

class GlobalmapProvincesDataInner(BaseModel):
    """
    GlobalmapProvincesDataInner
    """ # noqa: E501
    arena_id: StrictStr = Field(description="Map ID")
    arena_name: StrictStr = Field(description="Localized map name")
    daily_revenue: StrictInt = Field(description="Daily income")
    front_id: StrictStr = Field(description="Front ID")
    front_name: StrictStr = Field(description="Front name")
    revenue_level: StrictInt = Field(description="Income level from 0 to 11. 0 value means that income was not raised.")
    prime_time: StrictStr = Field(description="Prime Time in UTC")
    province_id: StrictStr = Field(description="Province ID")
    province_name: StrictStr = Field(description="Province name")
    landing_type: Optional[StrictStr] = Field(description="Landing type: auction, tournament or null")
    world_redivision: StrictBool = Field(description="Indicates if Repartition of the World is active")
    current_min_bet: StrictInt = Field(description="Current minimum bid")
    last_won_bet: StrictInt = Field(description="Last winning bid")
    neighbours: List[StrictStr] = Field(description="List of adjacent provinces' IDs")
    uri: StrictStr = Field(description="Relative link to province")
    round_number: Optional[StrictInt] = Field(description="Round")
    battles_start_at: StrictStr = Field(description="Battles start time in UTC")
    status: Optional[StrictStr] = Field(description="Tournament status: STARTED, FINISHED or null")
    max_bets: StrictInt = Field(description="Maximum number of bids")
    competitors: List[StrictInt] = Field(description="List of IDs of participating clans")
    attackers: List[StrictInt] = Field(description="List of IDs of attacking clans")
    active_battles: Optional[List[Optional[GlobalmapProvincesDataInnerActiveBattlesInner]]] = Field(description="Current battles")
    owner_clan_id: StrictInt = Field(description="Owning clan ID")
    is_borders_disabled: StrictBool = Field(description="Province borders are closed")
    pillage_end_at: Optional[StrictStr] = Field(description="Date when province will restore its revenue after ransack")
    server: StrictStr = Field(description="Server ID")
    __properties: ClassVar[List[str]] = ["arena_id", "arena_name", "daily_revenue", "front_id", "front_name", "revenue_level", "prime_time", "province_id", "province_name", "landing_type", "world_redivision", "current_min_bet", "last_won_bet", "neighbours", "uri", "round_number", "battles_start_at", "status", "max_bets", "competitors", "attackers", "active_battles", "owner_clan_id", "is_borders_disabled", "pillage_end_at", "server"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GlobalmapProvincesDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in active_battles (list)
        _items = []
        if self.active_battles:
            for _item_active_battles in self.active_battles:
                if _item_active_battles:
                    _items.append(_item_active_battles.to_dict())
            _dict['active_battles'] = _items
        # set to None if landing_type (nullable) is None
        # and model_fields_set contains the field
        if self.landing_type is None and "landing_type" in self.model_fields_set:
            _dict['landing_type'] = None

        # set to None if round_number (nullable) is None
        # and model_fields_set contains the field
        if self.round_number is None and "round_number" in self.model_fields_set:
            _dict['round_number'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if active_battles (nullable) is None
        # and model_fields_set contains the field
        if self.active_battles is None and "active_battles" in self.model_fields_set:
            _dict['active_battles'] = None

        # set to None if pillage_end_at (nullable) is None
        # and model_fields_set contains the field
        if self.pillage_end_at is None and "pillage_end_at" in self.model_fields_set:
            _dict['pillage_end_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GlobalmapProvincesDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arena_id": obj.get("arena_id"),
            "arena_name": obj.get("arena_name"),
            "daily_revenue": obj.get("daily_revenue"),
            "front_id": obj.get("front_id"),
            "front_name": obj.get("front_name"),
            "revenue_level": obj.get("revenue_level"),
            "prime_time": obj.get("prime_time"),
            "province_id": obj.get("province_id"),
            "province_name": obj.get("province_name"),
            "landing_type": obj.get("landing_type"),
            "world_redivision": obj.get("world_redivision"),
            "current_min_bet": obj.get("current_min_bet"),
            "last_won_bet": obj.get("last_won_bet"),
            "neighbours": obj.get("neighbours"),
            "uri": obj.get("uri"),
            "round_number": obj.get("round_number"),
            "battles_start_at": obj.get("battles_start_at"),
            "status": obj.get("status"),
            "max_bets": obj.get("max_bets"),
            "competitors": obj.get("competitors"),
            "attackers": obj.get("attackers"),
            "active_battles": [GlobalmapProvincesDataInnerActiveBattlesInner.from_dict(_item) for _item in obj["active_battles"]] if obj.get("active_battles") is not None else None,
            "owner_clan_id": obj.get("owner_clan_id"),
            "is_borders_disabled": obj.get("is_borders_disabled"),
            "pillage_end_at": obj.get("pillage_end_at"),
            "server": obj.get("server")
        })
        return _obj


