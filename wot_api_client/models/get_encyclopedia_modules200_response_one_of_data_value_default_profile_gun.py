# coding: utf-8

"""
    World of Tanks

    OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer's room](https://developers.wargaming.net/).

    The version of the OpenAPI document: 1.0.0
    Contact: contact@ace-tanker.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from wot_api_client.models.get_encyclopedia_vehicles200_response_one_of_data_value_default_profile_ammo_inner import GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileAmmoInner
from typing import Optional, Set
from typing_extensions import Self

class GetEncyclopediaModules200ResponseOneOfDataValueDefaultProfileGun(BaseModel):
    """
    Gun characteristics
    """ # noqa: E501
    fire_rate: Union[StrictFloat, StrictInt] = Field(description="Rate of fire (rounds/min)")
    dispersion: Union[StrictFloat, StrictInt] = Field(description="Dispersion at 100 m (m)")
    aim_time: Union[StrictFloat, StrictInt] = Field(description="Aiming time (s)")
    reload_time: Union[StrictFloat, StrictInt] = Field(description="Reload time (s)")
    move_up_arc: StrictInt = Field(description="Elevation angle (deg)")
    move_down_arc: StrictInt = Field(description="Depression angle (deg)")
    traverse_speed: StrictInt = Field(description="Traverse speed (deg/s)")
    ammo: Optional[List[Optional[GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileAmmoInner]]] = Field(description="Gun shells characteristics")
    max_ammo: StrictInt = Field(description="Number of shells")
    __properties: ClassVar[List[str]] = ["fire_rate", "dispersion", "aim_time", "reload_time", "move_up_arc", "move_down_arc", "traverse_speed", "ammo", "max_ammo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetEncyclopediaModules200ResponseOneOfDataValueDefaultProfileGun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ammo (list)
        _items = []
        if self.ammo:
            for _item_ammo in self.ammo:
                if _item_ammo:
                    _items.append(_item_ammo.to_dict())
            _dict['ammo'] = _items
        # set to None if ammo (nullable) is None
        # and model_fields_set contains the field
        if self.ammo is None and "ammo" in self.model_fields_set:
            _dict['ammo'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetEncyclopediaModules200ResponseOneOfDataValueDefaultProfileGun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fire_rate": obj.get("fire_rate"),
            "dispersion": obj.get("dispersion"),
            "aim_time": obj.get("aim_time"),
            "reload_time": obj.get("reload_time"),
            "move_up_arc": obj.get("move_up_arc"),
            "move_down_arc": obj.get("move_down_arc"),
            "traverse_speed": obj.get("traverse_speed"),
            "ammo": [GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileAmmoInner.from_dict(_item) for _item in obj["ammo"]] if obj.get("ammo") is not None else None,
            "max_ammo": obj.get("max_ammo")
        })
        return _obj


