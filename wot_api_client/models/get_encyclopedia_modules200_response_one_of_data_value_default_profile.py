# coding: utf-8

"""
    World of Tanks

    OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer's room](https://developers.wargaming.net/).

    The version of the OpenAPI document: 1.0.0
    Contact: contact@ace-tanker.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from wot_api_client.models.get_encyclopedia_modules200_response_one_of_data_value_default_profile_engine import GetEncyclopediaModules200ResponseOneOfDataValueDefaultProfileEngine
from wot_api_client.models.get_encyclopedia_modules200_response_one_of_data_value_default_profile_gun import GetEncyclopediaModules200ResponseOneOfDataValueDefaultProfileGun
from wot_api_client.models.get_encyclopedia_modules200_response_one_of_data_value_default_profile_radio import GetEncyclopediaModules200ResponseOneOfDataValueDefaultProfileRadio
from wot_api_client.models.get_encyclopedia_modules200_response_one_of_data_value_default_profile_suspension import GetEncyclopediaModules200ResponseOneOfDataValueDefaultProfileSuspension
from wot_api_client.models.get_encyclopedia_modules200_response_one_of_data_value_default_profile_turret import GetEncyclopediaModules200ResponseOneOfDataValueDefaultProfileTurret
from typing import Optional, Set
from typing_extensions import Self

class GetEncyclopediaModules200ResponseOneOfDataValueDefaultProfile(BaseModel):
    """
    Basic technical characteristics of module.
    """ # noqa: E501
    gun: Optional[GetEncyclopediaModules200ResponseOneOfDataValueDefaultProfileGun]
    engine: Optional[GetEncyclopediaModules200ResponseOneOfDataValueDefaultProfileEngine]
    turret: Optional[GetEncyclopediaModules200ResponseOneOfDataValueDefaultProfileTurret]
    suspension: Optional[GetEncyclopediaModules200ResponseOneOfDataValueDefaultProfileSuspension]
    radio: Optional[GetEncyclopediaModules200ResponseOneOfDataValueDefaultProfileRadio]
    __properties: ClassVar[List[str]] = ["gun", "engine", "turret", "suspension", "radio"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetEncyclopediaModules200ResponseOneOfDataValueDefaultProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gun
        if self.gun:
            _dict['gun'] = self.gun.to_dict()
        # override the default output from pydantic by calling `to_dict()` of engine
        if self.engine:
            _dict['engine'] = self.engine.to_dict()
        # override the default output from pydantic by calling `to_dict()` of turret
        if self.turret:
            _dict['turret'] = self.turret.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suspension
        if self.suspension:
            _dict['suspension'] = self.suspension.to_dict()
        # override the default output from pydantic by calling `to_dict()` of radio
        if self.radio:
            _dict['radio'] = self.radio.to_dict()
        # set to None if gun (nullable) is None
        # and model_fields_set contains the field
        if self.gun is None and "gun" in self.model_fields_set:
            _dict['gun'] = None

        # set to None if engine (nullable) is None
        # and model_fields_set contains the field
        if self.engine is None and "engine" in self.model_fields_set:
            _dict['engine'] = None

        # set to None if turret (nullable) is None
        # and model_fields_set contains the field
        if self.turret is None and "turret" in self.model_fields_set:
            _dict['turret'] = None

        # set to None if suspension (nullable) is None
        # and model_fields_set contains the field
        if self.suspension is None and "suspension" in self.model_fields_set:
            _dict['suspension'] = None

        # set to None if radio (nullable) is None
        # and model_fields_set contains the field
        if self.radio is None and "radio" in self.model_fields_set:
            _dict['radio'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetEncyclopediaModules200ResponseOneOfDataValueDefaultProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gun": GetEncyclopediaModules200ResponseOneOfDataValueDefaultProfileGun.from_dict(obj["gun"]) if obj.get("gun") is not None else None,
            "engine": GetEncyclopediaModules200ResponseOneOfDataValueDefaultProfileEngine.from_dict(obj["engine"]) if obj.get("engine") is not None else None,
            "turret": GetEncyclopediaModules200ResponseOneOfDataValueDefaultProfileTurret.from_dict(obj["turret"]) if obj.get("turret") is not None else None,
            "suspension": GetEncyclopediaModules200ResponseOneOfDataValueDefaultProfileSuspension.from_dict(obj["suspension"]) if obj.get("suspension") is not None else None,
            "radio": GetEncyclopediaModules200ResponseOneOfDataValueDefaultProfileRadio.from_dict(obj["radio"]) if obj.get("radio") is not None else None
        })
        return _obj


