# coding: utf-8

"""
    World of Tanks

    OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer's room](https://developers.wargaming.net/).

    The version of the OpenAPI document: 1.0.0
    Contact: contact@ace-tanker.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wot_api_client.models.globalmap_provinces_data_inner_active_battles_inner_clan_a import GlobalmapProvincesDataInnerActiveBattlesInnerClanA
from wot_api_client.models.globalmap_provinces_data_inner_active_battles_inner_clan_b import GlobalmapProvincesDataInnerActiveBattlesInnerClanB
from typing import Optional, Set
from typing_extensions import Self

class GlobalmapProvincesDataInnerActiveBattlesInner(BaseModel):
    """
    GlobalmapProvincesDataInnerActiveBattlesInner
    """ # noqa: E501
    start_at: StrictStr = Field(description="Battle start time in UTC")
    round: StrictInt = Field(description="Round")
    battle_reward: Optional[StrictInt] = Field(description="Award")
    clan_a: Optional[GlobalmapProvincesDataInnerActiveBattlesInnerClanA]
    clan_b: Optional[GlobalmapProvincesDataInnerActiveBattlesInnerClanB]
    __properties: ClassVar[List[str]] = ["start_at", "round", "battle_reward", "clan_a", "clan_b"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GlobalmapProvincesDataInnerActiveBattlesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of clan_a
        if self.clan_a:
            _dict['clan_a'] = self.clan_a.to_dict()
        # override the default output from pydantic by calling `to_dict()` of clan_b
        if self.clan_b:
            _dict['clan_b'] = self.clan_b.to_dict()
        # set to None if battle_reward (nullable) is None
        # and model_fields_set contains the field
        if self.battle_reward is None and "battle_reward" in self.model_fields_set:
            _dict['battle_reward'] = None

        # set to None if clan_a (nullable) is None
        # and model_fields_set contains the field
        if self.clan_a is None and "clan_a" in self.model_fields_set:
            _dict['clan_a'] = None

        # set to None if clan_b (nullable) is None
        # and model_fields_set contains the field
        if self.clan_b is None and "clan_b" in self.model_fields_set:
            _dict['clan_b'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GlobalmapProvincesDataInnerActiveBattlesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "start_at": obj.get("start_at"),
            "round": obj.get("round"),
            "battle_reward": obj.get("battle_reward"),
            "clan_a": GlobalmapProvincesDataInnerActiveBattlesInnerClanA.from_dict(obj["clan_a"]) if obj.get("clan_a") is not None else None,
            "clan_b": GlobalmapProvincesDataInnerActiveBattlesInnerClanB.from_dict(obj["clan_b"]) if obj.get("clan_b") is not None else None
        })
        return _obj


