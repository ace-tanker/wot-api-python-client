# coding: utf-8

"""
    World of Tanks

    OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer's room](https://developers.wargaming.net/).

    The version of the OpenAPI document: 1.0.0
    Contact: contact@ace-tanker.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wot_api_client.models.get_encyclopedia_boosters200_response_one_of_data_value_images import GetEncyclopediaBoosters200ResponseOneOfDataValueImages
from typing import Optional, Set
from typing_extensions import Self

class GetEncyclopediaBoosters200ResponseOneOfDataValue(BaseModel):
    """
    GetEncyclopediaBoosters200ResponseOneOfDataValue
    """ # noqa: E501
    booster_id: StrictInt = Field(description="Personal Reserve ID")
    name: StrictStr = Field(description="Personal Reserve name")
    description: StrictStr = Field(description="Personal Reserve description")
    images: Optional[GetEncyclopediaBoosters200ResponseOneOfDataValueImages]
    lifetime: StrictInt = Field(description="Personal Reserve duration in seconds")
    resource: StrictStr = Field(description="Resource affected by Personal Reserve. Valid values: credits, experience, crew_experience, free_experience.")
    is_auto: StrictBool = Field(description="Personal Reserve auto activation flag")
    expires_at: Optional[StrictInt] = Field(description="Personal Reserve expiration time in UTC")
    price_credit: StrictInt = Field(description="Cost in credits")
    price_gold: StrictInt = Field(description="Price in gold")
    __properties: ClassVar[List[str]] = ["booster_id", "name", "description", "images", "lifetime", "resource", "is_auto", "expires_at", "price_credit", "price_gold"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetEncyclopediaBoosters200ResponseOneOfDataValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of images
        if self.images:
            _dict['images'] = self.images.to_dict()
        # set to None if images (nullable) is None
        # and model_fields_set contains the field
        if self.images is None and "images" in self.model_fields_set:
            _dict['images'] = None

        # set to None if expires_at (nullable) is None
        # and model_fields_set contains the field
        if self.expires_at is None and "expires_at" in self.model_fields_set:
            _dict['expires_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetEncyclopediaBoosters200ResponseOneOfDataValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "booster_id": obj.get("booster_id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "images": GetEncyclopediaBoosters200ResponseOneOfDataValueImages.from_dict(obj["images"]) if obj.get("images") is not None else None,
            "lifetime": obj.get("lifetime"),
            "resource": obj.get("resource"),
            "is_auto": obj.get("is_auto"),
            "expires_at": obj.get("expires_at"),
            "price_credit": obj.get("price_credit"),
            "price_gold": obj.get("price_gold")
        })
        return _obj


