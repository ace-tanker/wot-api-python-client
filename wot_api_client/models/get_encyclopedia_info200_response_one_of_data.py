# coding: utf-8

"""
    World of Tanks

    OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer's room](https://developers.wargaming.net/).

    The version of the OpenAPI document: 1.0.0
    Contact: contact@ace-tanker.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wot_api_client.models.get_encyclopedia_info200_response_one_of_data_achievement_sections_value import GetEncyclopediaInfo200ResponseOneOfDataAchievementSectionsValue
from typing import Optional, Set
from typing_extensions import Self

class GetEncyclopediaInfo200ResponseOneOfData(BaseModel):
    """
    GetEncyclopediaInfo200ResponseOneOfData
    """ # noqa: E501
    game_version: StrictStr = Field(description="Game client version")
    tanks_updated_at: StrictInt = Field(description="Time when vehicles details in Tankopedia were updated")
    vehicle_types: Dict[str, StrictStr] = Field(description="Available vehicle types")
    vehicle_nations: Dict[str, StrictStr] = Field(description="Nations available")
    vehicle_crew_roles: Dict[str, StrictStr] = Field(description="Available crew qualifications")
    languages: Dict[str, StrictStr] = Field(description="List of supported languages")
    achievement_sections: Optional[Dict[str, Optional[GetEncyclopediaInfo200ResponseOneOfDataAchievementSectionsValue]]] = Field(description="Award sections")
    __properties: ClassVar[List[str]] = ["game_version", "tanks_updated_at", "vehicle_types", "vehicle_nations", "vehicle_crew_roles", "languages", "achievement_sections"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetEncyclopediaInfo200ResponseOneOfData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in achievement_sections (dict)
        _field_dict = {}
        if self.achievement_sections:
            for _key_achievement_sections in self.achievement_sections:
                if self.achievement_sections[_key_achievement_sections]:
                    _field_dict[_key_achievement_sections] = self.achievement_sections[_key_achievement_sections].to_dict()
            _dict['achievement_sections'] = _field_dict
        # set to None if achievement_sections (nullable) is None
        # and model_fields_set contains the field
        if self.achievement_sections is None and "achievement_sections" in self.model_fields_set:
            _dict['achievement_sections'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetEncyclopediaInfo200ResponseOneOfData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "game_version": obj.get("game_version"),
            "tanks_updated_at": obj.get("tanks_updated_at"),
            "vehicle_types": obj.get("vehicle_types"),
            "vehicle_nations": obj.get("vehicle_nations"),
            "vehicle_crew_roles": obj.get("vehicle_crew_roles"),
            "languages": obj.get("languages"),
            "achievement_sections": dict(
                (_k, GetEncyclopediaInfo200ResponseOneOfDataAchievementSectionsValue.from_dict(_v))
                for _k, _v in obj["achievement_sections"].items()
            )
            if obj.get("achievement_sections") is not None
            else None
        })
        return _obj


