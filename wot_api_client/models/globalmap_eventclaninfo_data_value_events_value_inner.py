# coding: utf-8

"""
    World of Tanks

    OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer's room](https://developers.wargaming.net/).

    The version of the OpenAPI document: 1.0.0
    Contact: contact@ace-tanker.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GlobalmapEventclaninfoDataValueEventsValueInner(BaseModel):
    """
    GlobalmapEventclaninfoDataValueEventsValueInner
    """ # noqa: E501
    front_id: StrictStr = Field(description="Front ID")
    event_id: StrictStr = Field(description="Event ID")
    fame_points: StrictInt = Field(description="Total Fame Points")
    fame_points_since_turn: StrictInt = Field(description="Change of Fame Points since last turn calculation")
    url: Optional[StrictStr] = Field(description="Link to Front")
    rank: StrictInt = Field(description="Current rating")
    rank_delta: StrictInt = Field(description="Rating changes during previous turn")
    battles: StrictInt = Field(description="Battles fought")
    wins: StrictInt = Field(description="Victories")
    battle_fame_points: StrictInt = Field(description="Battle Fame Points")
    task_fame_points: StrictInt = Field(description="Fame Points for completing a clan task")
    __properties: ClassVar[List[str]] = ["front_id", "event_id", "fame_points", "fame_points_since_turn", "url", "rank", "rank_delta", "battles", "wins", "battle_fame_points", "task_fame_points"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GlobalmapEventclaninfoDataValueEventsValueInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GlobalmapEventclaninfoDataValueEventsValueInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "front_id": obj.get("front_id"),
            "event_id": obj.get("event_id"),
            "fame_points": obj.get("fame_points"),
            "fame_points_since_turn": obj.get("fame_points_since_turn"),
            "url": obj.get("url"),
            "rank": obj.get("rank"),
            "rank_delta": obj.get("rank_delta"),
            "battles": obj.get("battles"),
            "wins": obj.get("wins"),
            "battle_fame_points": obj.get("battle_fame_points"),
            "task_fame_points": obj.get("task_fame_points")
        })
        return _obj


