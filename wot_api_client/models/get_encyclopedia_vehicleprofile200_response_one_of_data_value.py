# coding: utf-8

"""
    World of Tanks

    OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer's room](https://developers.wargaming.net/).

    The version of the OpenAPI document: 1.0.0
    Contact: contact@ace-tanker.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wot_api_client.models.get_encyclopedia_vehicles200_response_one_of_data_value_default_profile_ammo_inner import GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileAmmoInner
from wot_api_client.models.get_encyclopedia_vehicles200_response_one_of_data_value_default_profile_armor import GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileArmor
from wot_api_client.models.get_encyclopedia_vehicles200_response_one_of_data_value_default_profile_engine import GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileEngine
from wot_api_client.models.get_encyclopedia_vehicles200_response_one_of_data_value_default_profile_gun import GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileGun
from wot_api_client.models.get_encyclopedia_vehicles200_response_one_of_data_value_default_profile_modules import GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileModules
from wot_api_client.models.get_encyclopedia_vehicles200_response_one_of_data_value_default_profile_radio import GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileRadio
from wot_api_client.models.get_encyclopedia_vehicles200_response_one_of_data_value_default_profile_rapid import GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileRapid
from wot_api_client.models.get_encyclopedia_vehicles200_response_one_of_data_value_default_profile_siege import GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileSiege
from wot_api_client.models.get_encyclopedia_vehicles200_response_one_of_data_value_default_profile_suspension import GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileSuspension
from wot_api_client.models.get_encyclopedia_vehicles200_response_one_of_data_value_default_profile_turret import GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileTurret
from typing import Optional, Set
from typing_extensions import Self

class GetEncyclopediaVehicleprofile200ResponseOneOfDataValue(BaseModel):
    """
    GetEncyclopediaVehicleprofile200ResponseOneOfDataValue
    """ # noqa: E501
    hp: StrictInt = Field(description="Hit points")
    hull_hp: StrictInt = Field(description="Hull HP")
    weight: StrictInt = Field(description="Weight (kg)")
    hull_weight: StrictInt = Field(description="Hull weight (kg)")
    max_weight: StrictInt = Field(description="Load limit (kg)")
    max_ammo: StrictInt = Field(description="Ammunition")
    speed_forward: StrictInt = Field(description="Top speed (km/h)")
    speed_backward: StrictInt = Field(description="Top reverse speed (km/h)")
    modules: Optional[GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileModules]
    armor: Optional[GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileArmor]
    engine: Optional[GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileEngine]
    gun: Optional[GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileGun]
    turret: Optional[GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileTurret]
    suspension: Optional[GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileSuspension]
    radio: Optional[GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileRadio]
    ammo: Optional[List[Optional[GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileAmmoInner]]] = Field(description="Gun shells characteristics")
    siege: Optional[GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileSiege]
    rapid: Optional[GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileRapid]
    tank_id: StrictInt = Field(description="Vehicle ID")
    is_default: StrictBool = Field(description="Standard configuration")
    profile_id: StrictStr = Field(description="Vehicle Configuration ID")
    __properties: ClassVar[List[str]] = ["hp", "hull_hp", "weight", "hull_weight", "max_weight", "max_ammo", "speed_forward", "speed_backward", "modules", "armor", "engine", "gun", "turret", "suspension", "radio", "ammo", "siege", "rapid", "tank_id", "is_default", "profile_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetEncyclopediaVehicleprofile200ResponseOneOfDataValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of modules
        if self.modules:
            _dict['modules'] = self.modules.to_dict()
        # override the default output from pydantic by calling `to_dict()` of armor
        if self.armor:
            _dict['armor'] = self.armor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of engine
        if self.engine:
            _dict['engine'] = self.engine.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gun
        if self.gun:
            _dict['gun'] = self.gun.to_dict()
        # override the default output from pydantic by calling `to_dict()` of turret
        if self.turret:
            _dict['turret'] = self.turret.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suspension
        if self.suspension:
            _dict['suspension'] = self.suspension.to_dict()
        # override the default output from pydantic by calling `to_dict()` of radio
        if self.radio:
            _dict['radio'] = self.radio.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ammo (list)
        _items = []
        if self.ammo:
            for _item_ammo in self.ammo:
                if _item_ammo:
                    _items.append(_item_ammo.to_dict())
            _dict['ammo'] = _items
        # override the default output from pydantic by calling `to_dict()` of siege
        if self.siege:
            _dict['siege'] = self.siege.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rapid
        if self.rapid:
            _dict['rapid'] = self.rapid.to_dict()
        # set to None if modules (nullable) is None
        # and model_fields_set contains the field
        if self.modules is None and "modules" in self.model_fields_set:
            _dict['modules'] = None

        # set to None if armor (nullable) is None
        # and model_fields_set contains the field
        if self.armor is None and "armor" in self.model_fields_set:
            _dict['armor'] = None

        # set to None if engine (nullable) is None
        # and model_fields_set contains the field
        if self.engine is None and "engine" in self.model_fields_set:
            _dict['engine'] = None

        # set to None if gun (nullable) is None
        # and model_fields_set contains the field
        if self.gun is None and "gun" in self.model_fields_set:
            _dict['gun'] = None

        # set to None if turret (nullable) is None
        # and model_fields_set contains the field
        if self.turret is None and "turret" in self.model_fields_set:
            _dict['turret'] = None

        # set to None if suspension (nullable) is None
        # and model_fields_set contains the field
        if self.suspension is None and "suspension" in self.model_fields_set:
            _dict['suspension'] = None

        # set to None if radio (nullable) is None
        # and model_fields_set contains the field
        if self.radio is None and "radio" in self.model_fields_set:
            _dict['radio'] = None

        # set to None if ammo (nullable) is None
        # and model_fields_set contains the field
        if self.ammo is None and "ammo" in self.model_fields_set:
            _dict['ammo'] = None

        # set to None if siege (nullable) is None
        # and model_fields_set contains the field
        if self.siege is None and "siege" in self.model_fields_set:
            _dict['siege'] = None

        # set to None if rapid (nullable) is None
        # and model_fields_set contains the field
        if self.rapid is None and "rapid" in self.model_fields_set:
            _dict['rapid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetEncyclopediaVehicleprofile200ResponseOneOfDataValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hp": obj.get("hp"),
            "hull_hp": obj.get("hull_hp"),
            "weight": obj.get("weight"),
            "hull_weight": obj.get("hull_weight"),
            "max_weight": obj.get("max_weight"),
            "max_ammo": obj.get("max_ammo"),
            "speed_forward": obj.get("speed_forward"),
            "speed_backward": obj.get("speed_backward"),
            "modules": GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileModules.from_dict(obj["modules"]) if obj.get("modules") is not None else None,
            "armor": GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileArmor.from_dict(obj["armor"]) if obj.get("armor") is not None else None,
            "engine": GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileEngine.from_dict(obj["engine"]) if obj.get("engine") is not None else None,
            "gun": GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileGun.from_dict(obj["gun"]) if obj.get("gun") is not None else None,
            "turret": GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileTurret.from_dict(obj["turret"]) if obj.get("turret") is not None else None,
            "suspension": GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileSuspension.from_dict(obj["suspension"]) if obj.get("suspension") is not None else None,
            "radio": GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileRadio.from_dict(obj["radio"]) if obj.get("radio") is not None else None,
            "ammo": [GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileAmmoInner.from_dict(_item) for _item in obj["ammo"]] if obj.get("ammo") is not None else None,
            "siege": GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileSiege.from_dict(obj["siege"]) if obj.get("siege") is not None else None,
            "rapid": GetEncyclopediaVehicles200ResponseOneOfDataValueDefaultProfileRapid.from_dict(obj["rapid"]) if obj.get("rapid") is not None else None,
            "tank_id": obj.get("tank_id"),
            "is_default": obj.get("is_default"),
            "profile_id": obj.get("profile_id")
        })
        return _obj


