# coding: utf-8

"""
    World of Tanks

    OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer's room](https://developers.wargaming.net/).

    The version of the OpenAPI document: 1.0.0
    Contact: contact@ace-tanker.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wot_api_client.models.encyclopedia_achievements_data_value_options_inner import EncyclopediaAchievementsDataValueOptionsInner
from typing import Optional, Set
from typing_extensions import Self

class EncyclopediaAchievementsDataValue(BaseModel):
    """
    EncyclopediaAchievementsDataValue
    """ # noqa: E501
    name: StrictStr = Field(description="Achievement name")
    name_i18n: Optional[StrictStr] = Field(description="Localized **name** field")
    type: StrictStr = Field(description="Type")
    section: StrictStr = Field(description="Section")
    section_order: StrictInt = Field(description="Section order. Sections with a lesser value of the Section order field are displayed above sections with a greater value.")
    image: Optional[StrictStr] = Field(description="URL to image")
    image_big: Optional[StrictStr] = Field(description="180x180px image")
    description: StrictStr = Field(description="Achievement description")
    condition: Optional[StrictStr] = Field(description="Condition")
    hero_info: Optional[StrictStr] = Field(description="Historical reference")
    order: StrictInt = Field(description="Achievement order in this section. Achievements with a lesser value of the Order field are displayed above achievements with a greater value.")
    options: Optional[List[Optional[EncyclopediaAchievementsDataValueOptionsInner]]] = Field(description="Service Record")
    outdated: StrictBool = Field(description="Indicates, if achievement is outdated and cannot be received anymore")
    __properties: ClassVar[List[str]] = ["name", "name_i18n", "type", "section", "section_order", "image", "image_big", "description", "condition", "hero_info", "order", "options", "outdated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EncyclopediaAchievementsDataValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in options (list)
        _items = []
        if self.options:
            for _item_options in self.options:
                if _item_options:
                    _items.append(_item_options.to_dict())
            _dict['options'] = _items
        # set to None if name_i18n (nullable) is None
        # and model_fields_set contains the field
        if self.name_i18n is None and "name_i18n" in self.model_fields_set:
            _dict['name_i18n'] = None

        # set to None if image (nullable) is None
        # and model_fields_set contains the field
        if self.image is None and "image" in self.model_fields_set:
            _dict['image'] = None

        # set to None if image_big (nullable) is None
        # and model_fields_set contains the field
        if self.image_big is None and "image_big" in self.model_fields_set:
            _dict['image_big'] = None

        # set to None if condition (nullable) is None
        # and model_fields_set contains the field
        if self.condition is None and "condition" in self.model_fields_set:
            _dict['condition'] = None

        # set to None if hero_info (nullable) is None
        # and model_fields_set contains the field
        if self.hero_info is None and "hero_info" in self.model_fields_set:
            _dict['hero_info'] = None

        # set to None if options (nullable) is None
        # and model_fields_set contains the field
        if self.options is None and "options" in self.model_fields_set:
            _dict['options'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EncyclopediaAchievementsDataValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "name_i18n": obj.get("name_i18n"),
            "type": obj.get("type"),
            "section": obj.get("section"),
            "section_order": obj.get("section_order"),
            "image": obj.get("image"),
            "image_big": obj.get("image_big"),
            "description": obj.get("description"),
            "condition": obj.get("condition"),
            "hero_info": obj.get("hero_info"),
            "order": obj.get("order"),
            "options": [EncyclopediaAchievementsDataValueOptionsInner.from_dict(_item) for _item in obj["options"]] if obj.get("options") is not None else None,
            "outdated": obj.get("outdated")
        })
        return _obj


