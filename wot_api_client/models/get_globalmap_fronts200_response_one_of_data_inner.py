# coding: utf-8

"""
    World of Tanks

    OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer's room](https://developers.wargaming.net/).

    The version of the OpenAPI document: 1.0.0
    Contact: contact@ace-tanker.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wot_api_client.models.get_globalmap_fronts200_response_one_of_data_inner_available_extensions_inner import GetGlobalmapFronts200ResponseOneOfDataInnerAvailableExtensionsInner
from typing import Optional, Set
from typing_extensions import Self

class GetGlobalmapFronts200ResponseOneOfDataInner(BaseModel):
    """
    GetGlobalmapFronts200ResponseOneOfDataInner
    """ # noqa: E501
    front_id: StrictStr = Field(description="Front ID")
    front_name: StrictStr = Field(description="Front name")
    is_active: StrictBool = Field(description="Indicates if a map is active")
    is_event: StrictBool = Field(description="Indicates the map type: regular map or events map")
    vehicle_freeze: StrictBool = Field(description="Indicates if vehicles blocking is active")
    fog_of_war: StrictBool = Field(description="Indicates presence of Fog of War")
    battle_time_limit: StrictInt = Field(description="Maximum battle duration in minutes")
    min_tanks_per_division: StrictInt = Field(description="Minimum number of vehicles in division")
    max_tanks_per_division: StrictInt = Field(description="Maximum number of vehicles in division")
    division_cost: StrictInt = Field(description="Division cost")
    avg_clans_rating: StrictInt = Field(description="Average clans rating")
    avg_won_bet: StrictInt = Field(description="Average winning bid")
    avg_min_bet: StrictInt = Field(description="Average minimum bid")
    min_vehicle_level: StrictInt = Field(description="Minimum vehicle Tier")
    max_vehicle_level: StrictInt = Field(description="Maximum vehicle Tier")
    available_extensions: Optional[List[Optional[GetGlobalmapFronts200ResponseOneOfDataInnerAvailableExtensionsInner]]] = Field(description="Available modules")
    provinces_count: StrictInt = Field(description="Amount of Provinces")
    __properties: ClassVar[List[str]] = ["front_id", "front_name", "is_active", "is_event", "vehicle_freeze", "fog_of_war", "battle_time_limit", "min_tanks_per_division", "max_tanks_per_division", "division_cost", "avg_clans_rating", "avg_won_bet", "avg_min_bet", "min_vehicle_level", "max_vehicle_level", "available_extensions", "provinces_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetGlobalmapFronts200ResponseOneOfDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in available_extensions (list)
        _items = []
        if self.available_extensions:
            for _item_available_extensions in self.available_extensions:
                if _item_available_extensions:
                    _items.append(_item_available_extensions.to_dict())
            _dict['available_extensions'] = _items
        # set to None if available_extensions (nullable) is None
        # and model_fields_set contains the field
        if self.available_extensions is None and "available_extensions" in self.model_fields_set:
            _dict['available_extensions'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetGlobalmapFronts200ResponseOneOfDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "front_id": obj.get("front_id"),
            "front_name": obj.get("front_name"),
            "is_active": obj.get("is_active"),
            "is_event": obj.get("is_event"),
            "vehicle_freeze": obj.get("vehicle_freeze"),
            "fog_of_war": obj.get("fog_of_war"),
            "battle_time_limit": obj.get("battle_time_limit"),
            "min_tanks_per_division": obj.get("min_tanks_per_division"),
            "max_tanks_per_division": obj.get("max_tanks_per_division"),
            "division_cost": obj.get("division_cost"),
            "avg_clans_rating": obj.get("avg_clans_rating"),
            "avg_won_bet": obj.get("avg_won_bet"),
            "avg_min_bet": obj.get("avg_min_bet"),
            "min_vehicle_level": obj.get("min_vehicle_level"),
            "max_vehicle_level": obj.get("max_vehicle_level"),
            "available_extensions": [GetGlobalmapFronts200ResponseOneOfDataInnerAvailableExtensionsInner.from_dict(_item) for _item in obj["available_extensions"]] if obj.get("available_extensions") is not None else None,
            "provinces_count": obj.get("provinces_count")
        })
        return _obj


