# coding: utf-8

"""
    World of Tanks

    OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer's room](https://developers.wargaming.net/).

    The version of the OpenAPI document: 1.0.0
    Contact: contact@ace-tanker.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class AccountInfoDataValueStatisticsClan(BaseModel):
    """
    Clan battles statistics
    """ # noqa: E501
    battles: StrictInt = Field(description="Battles fought")
    wins: StrictInt = Field(description="Victories")
    xp: StrictInt = Field(description="Total experience")
    losses: StrictInt = Field(description="Defeats")
    survived_battles: StrictInt = Field(description="Battles survived")
    damage_received: StrictInt = Field(description="Damage received")
    damage_dealt: StrictInt = Field(description="Damage caused")
    spotted: StrictInt = Field(description="Enemies spotted")
    shots: StrictInt = Field(description="Shots fired")
    hits: StrictInt = Field(description="Hits")
    frags: StrictInt = Field(description="Vehicles destroyed")
    capture_points: StrictInt = Field(description="Base capture points")
    dropped_capture_points: StrictInt = Field(description="Base defense points")
    hits_percents: StrictInt = Field(description="Hit ratio")
    draws: StrictInt = Field(description="Draws")
    battle_avg_xp: StrictInt = Field(description="Average experience per battle")
    stun_number: StrictInt = Field(description="Number of times an enemy was stunned by you")
    battles_on_stunning_vehicles: StrictInt = Field(description="Number of battles on vehicles that cause the stun effect")
    stun_assisted_damage: StrictInt = Field(description="Damage to enemy vehicles stunned by you")
    track_assisted_damage: StrictInt = Field(description="Damage dealt to the target with the actor keeping-on-track assistance")
    radio_assisted_damage: StrictInt = Field(description="Damage dealt to the target with the actor radio recon assistance")
    tanking_factor: Union[StrictFloat, StrictInt] = Field(description="Ratio of damage blocked by armor from AP, HEAT, and APCR shells to damage received from these types of shells. Value is calculated starting from version 9.0.")
    direct_hits_received: StrictInt = Field(description="Direct hits received")
    explosion_hits_received: StrictInt = Field(description="Hits received as a result of splash damage")
    explosion_hits: StrictInt = Field(description="Hits on enemy as a result of splash damage")
    piercings_received: StrictInt = Field(description="Penetrations received")
    piercings: StrictInt = Field(description="Penetrations")
    no_damage_direct_hits_received: StrictInt = Field(description="Direct hits received that caused no damage")
    avg_damage_blocked: Union[StrictFloat, StrictInt] = Field(description="Average damage blocked by armor per battle. Damage blocked by armor is damage received from shells (AP, HEAT and APCR) that hit a vehicle but caused no damage. Value is calculated starting from version 9.0.")
    avg_damage_assisted_track: Union[StrictFloat, StrictInt] = Field(description="Average damage upon your shooting the track. Value is calculated starting from version 8.9.")
    avg_damage_assisted_radio: Union[StrictFloat, StrictInt] = Field(description="Average damage upon your spotting. Value is calculated starting from version 8.9.")
    avg_damage_assisted: Union[StrictFloat, StrictInt] = Field(description="Average damage caused with your assistance. Value is calculated starting from version 8.9.")
    avg_damage_assisted_stun: Union[StrictFloat, StrictInt] = Field(description="Average assisted stun damage.")
    __properties: ClassVar[List[str]] = ["battles", "wins", "xp", "losses", "survived_battles", "damage_received", "damage_dealt", "spotted", "shots", "hits", "frags", "capture_points", "dropped_capture_points", "hits_percents", "draws", "battle_avg_xp", "stun_number", "battles_on_stunning_vehicles", "stun_assisted_damage", "track_assisted_damage", "radio_assisted_damage", "tanking_factor", "direct_hits_received", "explosion_hits_received", "explosion_hits", "piercings_received", "piercings", "no_damage_direct_hits_received", "avg_damage_blocked", "avg_damage_assisted_track", "avg_damage_assisted_radio", "avg_damage_assisted", "avg_damage_assisted_stun"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountInfoDataValueStatisticsClan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountInfoDataValueStatisticsClan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "battles": obj.get("battles"),
            "wins": obj.get("wins"),
            "xp": obj.get("xp"),
            "losses": obj.get("losses"),
            "survived_battles": obj.get("survived_battles"),
            "damage_received": obj.get("damage_received"),
            "damage_dealt": obj.get("damage_dealt"),
            "spotted": obj.get("spotted"),
            "shots": obj.get("shots"),
            "hits": obj.get("hits"),
            "frags": obj.get("frags"),
            "capture_points": obj.get("capture_points"),
            "dropped_capture_points": obj.get("dropped_capture_points"),
            "hits_percents": obj.get("hits_percents"),
            "draws": obj.get("draws"),
            "battle_avg_xp": obj.get("battle_avg_xp"),
            "stun_number": obj.get("stun_number"),
            "battles_on_stunning_vehicles": obj.get("battles_on_stunning_vehicles"),
            "stun_assisted_damage": obj.get("stun_assisted_damage"),
            "track_assisted_damage": obj.get("track_assisted_damage"),
            "radio_assisted_damage": obj.get("radio_assisted_damage"),
            "tanking_factor": obj.get("tanking_factor"),
            "direct_hits_received": obj.get("direct_hits_received"),
            "explosion_hits_received": obj.get("explosion_hits_received"),
            "explosion_hits": obj.get("explosion_hits"),
            "piercings_received": obj.get("piercings_received"),
            "piercings": obj.get("piercings"),
            "no_damage_direct_hits_received": obj.get("no_damage_direct_hits_received"),
            "avg_damage_blocked": obj.get("avg_damage_blocked"),
            "avg_damage_assisted_track": obj.get("avg_damage_assisted_track"),
            "avg_damage_assisted_radio": obj.get("avg_damage_assisted_radio"),
            "avg_damage_assisted": obj.get("avg_damage_assisted"),
            "avg_damage_assisted_stun": obj.get("avg_damage_assisted_stun")
        })
        return _obj


