# coding: utf-8

"""
    World of Tanks

    OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer's room](https://developers.wargaming.net/).

    The version of the OpenAPI document: 1.0.0
    Contact: contact@ace-tanker.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wot_api_client.models.get_clanratings_clans200_response_one_of_data_value_fb_elo_rating import GetClanratingsClans200ResponseOneOfDataValueFbEloRating
from wot_api_client.models.get_clanratings_clans200_response_one_of_data_value_fb_elo_rating10 import GetClanratingsClans200ResponseOneOfDataValueFbEloRating10
from wot_api_client.models.get_clanratings_clans200_response_one_of_data_value_fb_elo_rating6 import GetClanratingsClans200ResponseOneOfDataValueFbEloRating6
from wot_api_client.models.get_clanratings_clans200_response_one_of_data_value_fb_elo_rating8 import GetClanratingsClans200ResponseOneOfDataValueFbEloRating8
from wot_api_client.models.get_clanratings_clans200_response_one_of_data_value_gm_elo_rating import GetClanratingsClans200ResponseOneOfDataValueGmEloRating
from wot_api_client.models.get_clanratings_clans200_response_one_of_data_value_gm_elo_rating10 import GetClanratingsClans200ResponseOneOfDataValueGmEloRating10
from wot_api_client.models.get_clanratings_clans200_response_one_of_data_value_gm_elo_rating6 import GetClanratingsClans200ResponseOneOfDataValueGmEloRating6
from wot_api_client.models.get_clanratings_clans200_response_one_of_data_value_gm_elo_rating8 import GetClanratingsClans200ResponseOneOfDataValueGmEloRating8
from wot_api_client.models.get_clanratings_clans200_response_one_of_data_value_rating_fort import GetClanratingsClans200ResponseOneOfDataValueRatingFort
from wot_api_client.models.get_clanratings_clans200_response_one_of_data_value_wins_ratio_avg import GetClanratingsClans200ResponseOneOfDataValueWinsRatioAvg
from wot_api_client.models.get_clanratings_top200_response_one_of_data_inner_battles_count_avg import GetClanratingsTop200ResponseOneOfDataInnerBattlesCountAvg
from wot_api_client.models.get_clanratings_top200_response_one_of_data_inner_battles_count_avg_daily import GetClanratingsTop200ResponseOneOfDataInnerBattlesCountAvgDaily
from wot_api_client.models.get_clanratings_top200_response_one_of_data_inner_efficiency import GetClanratingsTop200ResponseOneOfDataInnerEfficiency
from wot_api_client.models.get_clanratings_top200_response_one_of_data_inner_global_rating_avg import GetClanratingsTop200ResponseOneOfDataInnerGlobalRatingAvg
from wot_api_client.models.get_clanratings_top200_response_one_of_data_inner_global_rating_weighted_avg import GetClanratingsTop200ResponseOneOfDataInnerGlobalRatingWeightedAvg
from wot_api_client.models.get_clanratings_top200_response_one_of_data_inner_v10l_avg import GetClanratingsTop200ResponseOneOfDataInnerV10lAvg
from typing import Optional, Set
from typing_extensions import Self

class GetClanratingsTop200ResponseOneOfDataInner(BaseModel):
    """
    GetClanratingsTop200ResponseOneOfDataInner
    """ # noqa: E501
    clan_id: StrictInt = Field(description="Clan ID")
    clan_name: StrictStr = Field(description="Clan name")
    clan_tag: StrictStr = Field(description="Clan tag")
    v10l_avg: Optional[GetClanratingsTop200ResponseOneOfDataInnerV10lAvg]
    battles_count_avg: Optional[GetClanratingsTop200ResponseOneOfDataInnerBattlesCountAvg]
    battles_count_avg_daily: Optional[GetClanratingsTop200ResponseOneOfDataInnerBattlesCountAvgDaily]
    global_rating_avg: Optional[GetClanratingsTop200ResponseOneOfDataInnerGlobalRatingAvg]
    global_rating_weighted_avg: Optional[GetClanratingsTop200ResponseOneOfDataInnerGlobalRatingWeightedAvg]
    efficiency: Optional[GetClanratingsTop200ResponseOneOfDataInnerEfficiency]
    wins_ratio_avg: Optional[GetClanratingsClans200ResponseOneOfDataValueWinsRatioAvg]
    rating_fort: Optional[GetClanratingsClans200ResponseOneOfDataValueRatingFort]
    fb_elo_rating: Optional[GetClanratingsClans200ResponseOneOfDataValueFbEloRating]
    fb_elo_rating_10: Optional[GetClanratingsClans200ResponseOneOfDataValueFbEloRating10]
    fb_elo_rating_8: Optional[GetClanratingsClans200ResponseOneOfDataValueFbEloRating8]
    fb_elo_rating_6: Optional[GetClanratingsClans200ResponseOneOfDataValueFbEloRating6]
    gm_elo_rating: Optional[GetClanratingsClans200ResponseOneOfDataValueGmEloRating]
    gm_elo_rating_10: Optional[GetClanratingsClans200ResponseOneOfDataValueGmEloRating10]
    gm_elo_rating_8: Optional[GetClanratingsClans200ResponseOneOfDataValueGmEloRating8]
    gm_elo_rating_6: Optional[GetClanratingsClans200ResponseOneOfDataValueGmEloRating6]
    exclude_reasons: Dict[str, StrictStr] = Field(description="Reasons why specified rating categories were not calculated. Contains data in \"key-value\" format, where the key is category name and the value is reason.  Possible reasons:   * inactivity - Inactivity for 28 days  * newbies_measure - Under 10 members in the clan  * limits - Rank conditions not met  * blocked - Clan blocked  * other - Technical reasons")
    __properties: ClassVar[List[str]] = ["clan_id", "clan_name", "clan_tag", "v10l_avg", "battles_count_avg", "battles_count_avg_daily", "global_rating_avg", "global_rating_weighted_avg", "efficiency", "wins_ratio_avg", "rating_fort", "fb_elo_rating", "fb_elo_rating_10", "fb_elo_rating_8", "fb_elo_rating_6", "gm_elo_rating", "gm_elo_rating_10", "gm_elo_rating_8", "gm_elo_rating_6", "exclude_reasons"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetClanratingsTop200ResponseOneOfDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of v10l_avg
        if self.v10l_avg:
            _dict['v10l_avg'] = self.v10l_avg.to_dict()
        # override the default output from pydantic by calling `to_dict()` of battles_count_avg
        if self.battles_count_avg:
            _dict['battles_count_avg'] = self.battles_count_avg.to_dict()
        # override the default output from pydantic by calling `to_dict()` of battles_count_avg_daily
        if self.battles_count_avg_daily:
            _dict['battles_count_avg_daily'] = self.battles_count_avg_daily.to_dict()
        # override the default output from pydantic by calling `to_dict()` of global_rating_avg
        if self.global_rating_avg:
            _dict['global_rating_avg'] = self.global_rating_avg.to_dict()
        # override the default output from pydantic by calling `to_dict()` of global_rating_weighted_avg
        if self.global_rating_weighted_avg:
            _dict['global_rating_weighted_avg'] = self.global_rating_weighted_avg.to_dict()
        # override the default output from pydantic by calling `to_dict()` of efficiency
        if self.efficiency:
            _dict['efficiency'] = self.efficiency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wins_ratio_avg
        if self.wins_ratio_avg:
            _dict['wins_ratio_avg'] = self.wins_ratio_avg.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rating_fort
        if self.rating_fort:
            _dict['rating_fort'] = self.rating_fort.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fb_elo_rating
        if self.fb_elo_rating:
            _dict['fb_elo_rating'] = self.fb_elo_rating.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fb_elo_rating_10
        if self.fb_elo_rating_10:
            _dict['fb_elo_rating_10'] = self.fb_elo_rating_10.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fb_elo_rating_8
        if self.fb_elo_rating_8:
            _dict['fb_elo_rating_8'] = self.fb_elo_rating_8.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fb_elo_rating_6
        if self.fb_elo_rating_6:
            _dict['fb_elo_rating_6'] = self.fb_elo_rating_6.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gm_elo_rating
        if self.gm_elo_rating:
            _dict['gm_elo_rating'] = self.gm_elo_rating.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gm_elo_rating_10
        if self.gm_elo_rating_10:
            _dict['gm_elo_rating_10'] = self.gm_elo_rating_10.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gm_elo_rating_8
        if self.gm_elo_rating_8:
            _dict['gm_elo_rating_8'] = self.gm_elo_rating_8.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gm_elo_rating_6
        if self.gm_elo_rating_6:
            _dict['gm_elo_rating_6'] = self.gm_elo_rating_6.to_dict()
        # set to None if v10l_avg (nullable) is None
        # and model_fields_set contains the field
        if self.v10l_avg is None and "v10l_avg" in self.model_fields_set:
            _dict['v10l_avg'] = None

        # set to None if battles_count_avg (nullable) is None
        # and model_fields_set contains the field
        if self.battles_count_avg is None and "battles_count_avg" in self.model_fields_set:
            _dict['battles_count_avg'] = None

        # set to None if battles_count_avg_daily (nullable) is None
        # and model_fields_set contains the field
        if self.battles_count_avg_daily is None and "battles_count_avg_daily" in self.model_fields_set:
            _dict['battles_count_avg_daily'] = None

        # set to None if global_rating_avg (nullable) is None
        # and model_fields_set contains the field
        if self.global_rating_avg is None and "global_rating_avg" in self.model_fields_set:
            _dict['global_rating_avg'] = None

        # set to None if global_rating_weighted_avg (nullable) is None
        # and model_fields_set contains the field
        if self.global_rating_weighted_avg is None and "global_rating_weighted_avg" in self.model_fields_set:
            _dict['global_rating_weighted_avg'] = None

        # set to None if efficiency (nullable) is None
        # and model_fields_set contains the field
        if self.efficiency is None and "efficiency" in self.model_fields_set:
            _dict['efficiency'] = None

        # set to None if wins_ratio_avg (nullable) is None
        # and model_fields_set contains the field
        if self.wins_ratio_avg is None and "wins_ratio_avg" in self.model_fields_set:
            _dict['wins_ratio_avg'] = None

        # set to None if rating_fort (nullable) is None
        # and model_fields_set contains the field
        if self.rating_fort is None and "rating_fort" in self.model_fields_set:
            _dict['rating_fort'] = None

        # set to None if fb_elo_rating (nullable) is None
        # and model_fields_set contains the field
        if self.fb_elo_rating is None and "fb_elo_rating" in self.model_fields_set:
            _dict['fb_elo_rating'] = None

        # set to None if fb_elo_rating_10 (nullable) is None
        # and model_fields_set contains the field
        if self.fb_elo_rating_10 is None and "fb_elo_rating_10" in self.model_fields_set:
            _dict['fb_elo_rating_10'] = None

        # set to None if fb_elo_rating_8 (nullable) is None
        # and model_fields_set contains the field
        if self.fb_elo_rating_8 is None and "fb_elo_rating_8" in self.model_fields_set:
            _dict['fb_elo_rating_8'] = None

        # set to None if fb_elo_rating_6 (nullable) is None
        # and model_fields_set contains the field
        if self.fb_elo_rating_6 is None and "fb_elo_rating_6" in self.model_fields_set:
            _dict['fb_elo_rating_6'] = None

        # set to None if gm_elo_rating (nullable) is None
        # and model_fields_set contains the field
        if self.gm_elo_rating is None and "gm_elo_rating" in self.model_fields_set:
            _dict['gm_elo_rating'] = None

        # set to None if gm_elo_rating_10 (nullable) is None
        # and model_fields_set contains the field
        if self.gm_elo_rating_10 is None and "gm_elo_rating_10" in self.model_fields_set:
            _dict['gm_elo_rating_10'] = None

        # set to None if gm_elo_rating_8 (nullable) is None
        # and model_fields_set contains the field
        if self.gm_elo_rating_8 is None and "gm_elo_rating_8" in self.model_fields_set:
            _dict['gm_elo_rating_8'] = None

        # set to None if gm_elo_rating_6 (nullable) is None
        # and model_fields_set contains the field
        if self.gm_elo_rating_6 is None and "gm_elo_rating_6" in self.model_fields_set:
            _dict['gm_elo_rating_6'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetClanratingsTop200ResponseOneOfDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clan_id": obj.get("clan_id"),
            "clan_name": obj.get("clan_name"),
            "clan_tag": obj.get("clan_tag"),
            "v10l_avg": GetClanratingsTop200ResponseOneOfDataInnerV10lAvg.from_dict(obj["v10l_avg"]) if obj.get("v10l_avg") is not None else None,
            "battles_count_avg": GetClanratingsTop200ResponseOneOfDataInnerBattlesCountAvg.from_dict(obj["battles_count_avg"]) if obj.get("battles_count_avg") is not None else None,
            "battles_count_avg_daily": GetClanratingsTop200ResponseOneOfDataInnerBattlesCountAvgDaily.from_dict(obj["battles_count_avg_daily"]) if obj.get("battles_count_avg_daily") is not None else None,
            "global_rating_avg": GetClanratingsTop200ResponseOneOfDataInnerGlobalRatingAvg.from_dict(obj["global_rating_avg"]) if obj.get("global_rating_avg") is not None else None,
            "global_rating_weighted_avg": GetClanratingsTop200ResponseOneOfDataInnerGlobalRatingWeightedAvg.from_dict(obj["global_rating_weighted_avg"]) if obj.get("global_rating_weighted_avg") is not None else None,
            "efficiency": GetClanratingsTop200ResponseOneOfDataInnerEfficiency.from_dict(obj["efficiency"]) if obj.get("efficiency") is not None else None,
            "wins_ratio_avg": GetClanratingsClans200ResponseOneOfDataValueWinsRatioAvg.from_dict(obj["wins_ratio_avg"]) if obj.get("wins_ratio_avg") is not None else None,
            "rating_fort": GetClanratingsClans200ResponseOneOfDataValueRatingFort.from_dict(obj["rating_fort"]) if obj.get("rating_fort") is not None else None,
            "fb_elo_rating": GetClanratingsClans200ResponseOneOfDataValueFbEloRating.from_dict(obj["fb_elo_rating"]) if obj.get("fb_elo_rating") is not None else None,
            "fb_elo_rating_10": GetClanratingsClans200ResponseOneOfDataValueFbEloRating10.from_dict(obj["fb_elo_rating_10"]) if obj.get("fb_elo_rating_10") is not None else None,
            "fb_elo_rating_8": GetClanratingsClans200ResponseOneOfDataValueFbEloRating8.from_dict(obj["fb_elo_rating_8"]) if obj.get("fb_elo_rating_8") is not None else None,
            "fb_elo_rating_6": GetClanratingsClans200ResponseOneOfDataValueFbEloRating6.from_dict(obj["fb_elo_rating_6"]) if obj.get("fb_elo_rating_6") is not None else None,
            "gm_elo_rating": GetClanratingsClans200ResponseOneOfDataValueGmEloRating.from_dict(obj["gm_elo_rating"]) if obj.get("gm_elo_rating") is not None else None,
            "gm_elo_rating_10": GetClanratingsClans200ResponseOneOfDataValueGmEloRating10.from_dict(obj["gm_elo_rating_10"]) if obj.get("gm_elo_rating_10") is not None else None,
            "gm_elo_rating_8": GetClanratingsClans200ResponseOneOfDataValueGmEloRating8.from_dict(obj["gm_elo_rating_8"]) if obj.get("gm_elo_rating_8") is not None else None,
            "gm_elo_rating_6": GetClanratingsClans200ResponseOneOfDataValueGmEloRating6.from_dict(obj["gm_elo_rating_6"]) if obj.get("gm_elo_rating_6") is not None else None,
            "exclude_reasons": obj.get("exclude_reasons")
        })
        return _obj


