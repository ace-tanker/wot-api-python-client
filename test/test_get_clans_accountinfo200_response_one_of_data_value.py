# coding: utf-8

"""
    World of Tanks

    OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer's room](https://developers.wargaming.net/).

    The version of the OpenAPI document: 1.0.0
    Contact: contact@ace-tanker.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from wot_api_client.models.get_clans_accountinfo200_response_one_of_data_value import GetClansAccountinfo200ResponseOneOfDataValue

class TestGetClansAccountinfo200ResponseOneOfDataValue(unittest.TestCase):
    """GetClansAccountinfo200ResponseOneOfDataValue unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetClansAccountinfo200ResponseOneOfDataValue:
        """Test GetClansAccountinfo200ResponseOneOfDataValue
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetClansAccountinfo200ResponseOneOfDataValue`
        """
        model = GetClansAccountinfo200ResponseOneOfDataValue()
        if include_optional:
            return GetClansAccountinfo200ResponseOneOfDataValue(
                account_id = 56,
                account_name = '',
                joined_at = 56,
                role = '',
                role_i18n = '',
                clan = wot_api_client.models.get_clans_accountinfo_200_response_one_of_data_value_clan.get_clans_accountinfo_200_response_oneOf_data_value_clan(
                    clan_id = 56, 
                    name = '', 
                    tag = '', 
                    created_at = 56, 
                    color = '', 
                    members_count = 56, 
                    emblems = wot_api_client.models.get_clans_list_200_response_one_of_data_inner_emblems.get_clans_list_200_response_oneOf_data_inner_emblems(
                        x24 = {
                            'key' : ''
                            }, 
                        x32 = {
                            'key' : ''
                            }, 
                        x64 = {
                            'key' : ''
                            }, 
                        x195 = {
                            'key' : ''
                            }, 
                        x256 = {
                            'key' : ''
                            }, ), )
            )
        else:
            return GetClansAccountinfo200ResponseOneOfDataValue(
                account_id = 56,
                account_name = '',
                joined_at = 56,
                role = '',
                role_i18n = '',
                clan = wot_api_client.models.get_clans_accountinfo_200_response_one_of_data_value_clan.get_clans_accountinfo_200_response_oneOf_data_value_clan(
                    clan_id = 56, 
                    name = '', 
                    tag = '', 
                    created_at = 56, 
                    color = '', 
                    members_count = 56, 
                    emblems = wot_api_client.models.get_clans_list_200_response_one_of_data_inner_emblems.get_clans_list_200_response_oneOf_data_inner_emblems(
                        x24 = {
                            'key' : ''
                            }, 
                        x32 = {
                            'key' : ''
                            }, 
                        x64 = {
                            'key' : ''
                            }, 
                        x195 = {
                            'key' : ''
                            }, 
                        x256 = {
                            'key' : ''
                            }, ), ),
        )
        """

    def testGetClansAccountinfo200ResponseOneOfDataValue(self):
        """Test GetClansAccountinfo200ResponseOneOfDataValue"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
