# coding: utf-8

"""
    World of Tanks

    OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer's room](https://developers.wargaming.net/).

    The version of the OpenAPI document: 1.0.0
    Contact: contact@ace-tanker.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from wot_api_client.models.get_globalmap_clanprovinces200_response import GetGlobalmapClanprovinces200Response

class TestGetGlobalmapClanprovinces200Response(unittest.TestCase):
    """GetGlobalmapClanprovinces200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetGlobalmapClanprovinces200Response:
        """Test GetGlobalmapClanprovinces200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetGlobalmapClanprovinces200Response`
        """
        model = GetGlobalmapClanprovinces200Response()
        if include_optional:
            return GetGlobalmapClanprovinces200Response(
                status = 'error',
                meta = wot_api_client.models.globalmap_clanprovinces_meta.globalmap_clanprovinces_meta(
                    count = 56, ),
                data = {
                    'key' : [
                        wot_api_client.models.globalmap_clanprovinces_data_value_inner.globalmap_clanprovinces_data_value_inner(
                            arena_id = '', 
                            arena_name = '', 
                            daily_revenue = 56, 
                            front_id = '', 
                            front_name = '', 
                            revenue_level = 56, 
                            prime_time = '', 
                            province_id = '', 
                            province_name = '', 
                            clan_id = 56, 
                            landing_type = '', 
                            turns_owned = 56, 
                            max_vehicle_level = 56, 
                            private = null, 
                            pillage_end_at = '', )
                        ]
                    },
                error = wot_api_client.models.error.error()
            )
        else:
            return GetGlobalmapClanprovinces200Response(
                status = 'error',
                meta = wot_api_client.models.globalmap_clanprovinces_meta.globalmap_clanprovinces_meta(
                    count = 56, ),
                data = {
                    'key' : [
                        wot_api_client.models.globalmap_clanprovinces_data_value_inner.globalmap_clanprovinces_data_value_inner(
                            arena_id = '', 
                            arena_name = '', 
                            daily_revenue = 56, 
                            front_id = '', 
                            front_name = '', 
                            revenue_level = 56, 
                            prime_time = '', 
                            province_id = '', 
                            province_name = '', 
                            clan_id = 56, 
                            landing_type = '', 
                            turns_owned = 56, 
                            max_vehicle_level = 56, 
                            private = null, 
                            pillage_end_at = '', )
                        ]
                    },
                error = wot_api_client.models.error.error(),
        )
        """

    def testGetGlobalmapClanprovinces200Response(self):
        """Test GetGlobalmapClanprovinces200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
