# coding: utf-8

"""
    World of Tanks

    OpenAPI specification for the Wargaming.net Public API. The official Wargaming.net Public API documentation can be found at the Wargaming [Developer's room](https://developers.wargaming.net/).

    The version of the OpenAPI document: 1.0.0
    Contact: contact@ace-tanker.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from wot_api_client.models.account_info_data_value_private import AccountInfoDataValuePrivate

class TestAccountInfoDataValuePrivate(unittest.TestCase):
    """AccountInfoDataValuePrivate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AccountInfoDataValuePrivate:
        """Test AccountInfoDataValuePrivate
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AccountInfoDataValuePrivate`
        """
        model = AccountInfoDataValuePrivate()
        if include_optional:
            return AccountInfoDataValuePrivate(
                personal_missions = {
                    'key' : ''
                    },
                gold = 56,
                battle_life_time = 56,
                free_xp = 56,
                credits = 56,
                premium_expires_at = 56,
                is_premium = True,
                rented = {
                    'key' : wot_api_client.models.account_info_data_value_private_rented_value.account_info_data_value_private_rented_value(
                        tank_id = 56, 
                        compensation_credits = 56, 
                        compensation_gold = 56, 
                        expiration_time = 56, )
                    },
                grouped_contacts = wot_api_client.models.account_info_data_value_private_grouped_contacts.account_info_data_value_private_grouped_contacts(
                    ungrouped = [
                        56
                        ], 
                    ignored = [
                        56
                        ], 
                    blocked = [
                        56
                        ], 
                    muted = [
                        56
                        ], 
                    groups = {
                        'key' : [
                            56
                            ]
                        }, ),
                restrictions = wot_api_client.models.account_info_data_value_private_restrictions.account_info_data_value_private_restrictions(
                    chat_ban_time = 56, ),
                is_bound_to_phone = True,
                boosters = {
                    'key' : wot_api_client.models.account_info_data_value_private_boosters_value.account_info_data_value_private_boosters_value(
                        state = '', 
                        count = 56, 
                        expiration_time = 56, )
                    },
                garage = [
                    56
                    ],
                ban_info = '',
                ban_time = 56,
                bonds = 56
            )
        else:
            return AccountInfoDataValuePrivate(
                gold = 56,
                battle_life_time = 56,
                free_xp = 56,
                credits = 56,
                premium_expires_at = 56,
                is_premium = True,
                restrictions = wot_api_client.models.account_info_data_value_private_restrictions.account_info_data_value_private_restrictions(
                    chat_ban_time = 56, ),
                is_bound_to_phone = True,
                ban_info = '',
                ban_time = 56,
                bonds = 56,
        )
        """

    def testAccountInfoDataValuePrivate(self):
        """Test AccountInfoDataValuePrivate"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
